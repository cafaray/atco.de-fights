{
	"info": {
		"_postman_id": "88accf42-4c04-4a53-be91-dc3b30c39310",
		"name": "SP13- PSD2_Canales_Colección_Base_Formato_REDSYS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[Login] Autenticación OAuth (PreStep) ",
			"item": [
				{
					"name": "PRE-STEP_LoginObtenerAutorizacion_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a0f3f6d1-4b8d-40ad-8887-e131f59aa011",
								"exec": [
									"//Limpiamos las variables globales",
									"pm.globals.clear();",
									"",
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP AUTHORIZE \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys/v1\"; // Se ha eliminado el /v1",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S01_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"",
									"//////////////////////////////////////////////////////////////////////",
									"var state = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"state\", state);",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31ec359b-2bad-484f-b588-4bd97a063574",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 302\", function () {",
									"    pm.response.to.have.status(302);",
									"});",
									"",
									"",
									"// Control de excepción de Headers Response",
									"try {",
									"    var jsonHeadersResponse = JSON.stringify(pm.response.headers);",
									"        //Si la respuesta devuelve el Header Location verificamos assertions",
									"    if (pm.response.to.have.header(\"Location\")){",
									"        var location2 = pm.response.headers.one('Location').value;",
									"        var state2 = location2.substring(location2.indexOf(\"state\")+5);",
									"        ",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Redirect location is OK -> \" + location2, function () {",
									"               pm.expect(location2, \"Header Location value is \" + location2).to.eql(location2);",
									"        });",
									"        ",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"State is OK -> \" + state2, function () {",
									"               pm.expect(state2, \"State value is \" + state2).to.eql(state2);",
									"        });",
									"           ",
									"    }else{",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Redirect location is KO \", function () {",
									"            pm.expect(1).to.eql(2);",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Headers \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/authorize?response_type=code&client_id={{client-id-tpp}}&scope={{preStepScopes}}&state={{state}}&redirect_uri={{redirectUri}}&code_challenge={{codeChallenge}}&code_challenge_method={{codeChallengeMethod}}&second_client_id={{secondClientId}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "response_type",
									"value": "code",
									"description": "Obligatorio"
								},
								{
									"key": "client_id",
									"value": "{{client-id-tpp}}",
									"description": "Obligatorio"
								},
								{
									"key": "scope",
									"value": "{{preStepScopes}}",
									"description": "Obligatorio"
								},
								{
									"key": "state",
									"value": "{{state}}",
									"description": "Obligatorio"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirectUri}}",
									"description": "Obligatorio"
								},
								{
									"key": "code_challenge",
									"value": "{{codeChallenge}}",
									"description": "Obligatorio"
								},
								{
									"key": "code_challenge_method",
									"value": "{{codeChallengeMethod}}"
								},
								{
									"key": "second_client_id",
									"value": "{{secondClientId}}"
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=34146786\n\nEl HUB redirecciona el navegador del PSU para que realice la siguiente petición (redirección)"
					},
					"response": []
				},
				{
					"name": "INTERNAL_spa - login_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f877790-115b-4c64-a899-5e53e97d490e",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"    if (pm.response.to.have.status(200));",
									"});",
									"",
									"if (pm.response.code == 200){",
									"    // Control de excepción de Body Response",
									"    try {",
									"        var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"        if (jsonDataResponse){",
									"            // Almacenar el jsonData Response (Body)",
									"            //var jsonDataResponse = pm.response.json();",
									"            console.log(\"USUARIO ACTIVO: \" + pm.variables.get(\"user\") + \" / \" + pm.variables.get(\"pass\") + \" / \" + pm.variables.get(\"procedence\"));",
									"            pm.test(\"Usuario Activo: \" + pm.variables.get(\"user\") + \" / \" + pm.variables.get(\"pass\") + \" / \" + pm.variables.get(\"procedence\"), function (){",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"AccessToken exists -> \" + jsonDataResponse.access_token, function () {",
									"            if(pm.expect(jsonDataResponse,\"accessToken property exists\").to.have.property('access_token')){",
									"                pm.globals.set(\"access-token-spa\", jsonDataResponse.access_token);",
									"                console.log(\"access-token-spa \" + jsonDataResponse.access_token);    ",
									"            }",
									"            });",
									"        ",
									"        } else { // Reportamos error de Body",
									"            //if  ((idtest != \"TRFXXX\") && (idtest != \"TRFXXX\") && (idtest != \"TRFXXX\")){",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ResponseBody is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            //}",
									"        }",
									"    } catch (e) {",
									"        console.log(\"There was an error parsing JSON Body \", e);",
									"    }",
									"} else {",
									"    console.log(\" !!!!!! USUARIO BLOQUEADO: \" + pm.variables.get(\"user\") + \" / \" + pm.variables.get(\"pass\") + \" / \" + pm.variables.get(\"procedence\"));",
									"    pm.test(\"USUARIO BLOQUEADO: \" + pm.variables.get(\"user\") + \" / \" + pm.variables.get(\"pass\") + \" / \" + pm.variables.get(\"procedence\"), function (){",
									"        pm.expect(1).to.eql(2);",
									"    });",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d45fc83-1691-4356-ba7d-6439455446de",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA LOGIN \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S02_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{caserver}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "HEADER.SERVICE_PROCEDENCE",
								"value": "{{procedence}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{user}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{pass}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "submit",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{provider}}/v1/login?scope={{scope-spa}} {{preStepScopesSpa}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"login"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope-spa}} {{preStepScopesSpa}}"
								}
							]
						},
						"description": "User enters credentials into SPA and executes a login"
					},
					"response": []
				},
				{
					"name": "INTERNAL_spa - confirm_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebdda3b9-457a-4331-b38c-ffddaa83661f",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"    if (pm.response.to.have.status(200));",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        //console.log(\"jsonDataResponse \" + jsonDataResponse);",
									"",
									"        // Obtener la URL del valor del Response Body URL = \"Location\"",
									"",
									"        var sdk = require('postman-collection'),",
									"            url = new sdk.Url(jsonDataResponse.url),",
									"            urlJson = url.toJSON();",
									"",
									"        // Verificar que el Response Header \"Location\" existe",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Session Params are OK\", function(){",
									"            pm.expect(jsonDataResponse.url, \"URL Location in Body exists\").to.exist;",
									"        });",
									"            ",
									"        // Extraer el \"code\" y el \"state\" de la URL del Response Header \"Location\"",
									"        var aToken = jsonDataResponse.url.split(\"code=\")[1].split(\"&\")[0];",
									"        pm.globals.set(\"authorization_code\", aToken);",
									"        //console.log(\"Autorization Code: \" + aToken);",
									"        ",
									"        var state = jsonDataResponse.url.split(\"state=\")[1].split(\"&\")[0];",
									"        //console.log(\"State Code: \" + state);",
									"        ",
									"        // Verificar que el Response HEader \"Location\" contiene un code Token y un state    ",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Code Token is \" + aToken, function (){",
									"            pm.expect(jsonDataResponse.url,\"Location URL query parameter Authorization Code exists\").to.include('?code=');",
									"            //console.log(\"Autorization Code: \" + aToken);",
									"        });",
									"        ",
									"        // Verificar que el Response Header \"Location\" contiene un state    ",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"State is \" + state, function (){",
									"            pm.expect(jsonDataResponse.url,\"Location URL query parameter State exists\").to.include('&state=');",
									"            //console.log(\"State: \" + state);",
									"        });",
									"    } else { // Reportamos error de Body",
									"        //if  ((idtest != \"TRFXXX\") && (idtest != \"TRFXXX\") && (idtest != \"TRFXXX\")){",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                pm.expect(iban1).to.eql(2);",
									"            });",
									"        //}",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "24daa3dc-fb05-4536-9d0c-8daf04b6f861",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA CONFIRM \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal/v1\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S03_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{caserver}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "state",
									"value": "{{state}}",
									"type": "text"
								},
								{
									"key": "action",
									"value": "confirm",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{provider}}/authorize?scope={{scope-spa}} {{preStepScopesSpa}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "scope",
									"value": "{{scope-spa}} {{preStepScopesSpa}}"
								}
							]
						},
						"description": "Confirm Pre-Step access to 3rd party TPP"
					},
					"response": []
				},
				{
					"name": "COR501_ObtencionDeTokenDeAcceso_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9625b5bb-26e9-4f41-b58b-702257d241b5",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"// Verificar que el Status Code es 200",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"",
									"    ",
									"        // Almacenar el access Token en una variable global para su re-uso en siguientes peticiones",
									"        pm.globals.set(\"access-token-tpp\", jsonDataResponse.access_token);",
									"        ",
									"        // Validar que existe un Access Token en el Body de la respuesta",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Access Token exists -> \" + jsonDataResponse.access_token, function (){",
									"            pm.expect(jsonDataResponse.access_token,\"Access Token exists\").to.exist;",
									"        });",
									"        ",
									"        // Almacenar el refresh Token en una variable global para su re-uso en siguientes peticiones",
									"        pm.globals.set(\"refresh-token-tpp\", jsonDataResponse.refresh_token);",
									"        ",
									"        // Validar que existe un Refresh Token en el Body de la respuesta",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Refresh Token exists -> \" + jsonDataResponse.refresh_token, function (){",
									"            pm.expect(jsonDataResponse.refresh_token,\"Refresh Token exists\").to.exist;",
									"        });",
									"    } else { // Reportamos error de Body",
									"        //if (idtest != \"TRF011F\"){",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"        //            }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d46dfbb-f895-4956-96b3-e207164b987f",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP TOKEN \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys/v1\"; // se ha eliminado el v1",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S04_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id-tpp}}",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorization_code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "{{redirectUri}}",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{codeVerifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{provider}}/token",
							"host": [
								"{{provider}}"
							],
							"path": [
								"token"
							]
						},
						"description": "The TPP performs a login "
					},
					"response": []
				},
				{
					"name": "COR502_RenovacionDeTokenDeAcceso_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e0d42ce-1f57-4ed5-becb-b6dcb3e7d231",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP REFRESH TOKEN \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys/v1\";  //Se ha eliminado el v1",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S05_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f299b853-cbe7-430c-968b-cdd0a6f6e6ba",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"// Verificar que el Status Code es 200",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        ",
									"        console.log(\"$----$----$----$----$----$----  \" + idTest + \" TPP REFRESH TOKEN: \" + jsonDataResponse.refresh_token +  \"      ----$----$----$----$----$\");",
									"",
									"        // Almacenar el access Token en una variable global para su re-uso en siguientes peticiones",
									"        pm.globals.set(\"access-token-tpp\", jsonDataResponse.access_token);",
									"        ",
									"        // Validar que existe un Access Token en el Body de la respuesta",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"TPP Access Token exists -> \" + jsonDataResponse.access_token, function (){",
									"            pm.expect(jsonDataResponse.access_token,\"TPP Access Token exists\").to.exist;",
									"        });",
									"        ",
									"        // Almacenar el refresh Token en una variable global para su re-uso en siguientes peticiones",
									"        pm.globals.set(\"refresh-token-tpp\", jsonDataResponse.refresh_token);",
									"        ",
									"        // Validar que existe un Refresh Token en el Body de la respuesta",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"TPP Refresh Token exists -> \" + jsonDataResponse.refresh_token, function (){",
									"            pm.expect(jsonDataResponse.refresh_token,\"TPP Refresh Token exists\").to.exist;",
									"        });",
									"    } else { // Reportamos error de Body",
									"        //if (idtest != \"TRF011F\"){",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"        //            }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "Postman-Token",
								"value": "d6c5650e-cade-4b80-b3b8-66a92590f244",
								"disabled": true
							},
							{
								"key": "cache-control",
								"value": "no-cache",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{client-id-tpp}}",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh-token-tpp}}",
									"type": "text"
								},
								{
									"key": "undefined",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{provider}}/token",
							"host": [
								"{{provider}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=33030812\r\n\r\nPara que un TPP pueda acceder a las APIs de la entidad para operar en nombre de un PSU se requiere de una paso inicial (prestep).\r\n\r\nEste paso inicial consiste en que el TPP redirige al usuario a la pantalla de Login. El Login es el proceso mediante el cual se controla el acceso individual al sistema informático de la entidad mediante la identificación del PSU utilizando la contraseña provista por el PSU. Si el login es correcto, entonces se finaliza el proceso con una negociación de token OAuth entre el TPP y la entidad.\r\n\r\nPor tanto, si este paso se realiza con éxito, el PSU está concediendo permisos al TPP para acceder a la API en su nombre. \r\n\r\nDentro de la negociación del token OAuth, se determina a que conjunto de APIs el TPP puede acceder en función de los roles que tiene asignados (AISP, PSIP, PIISP)\r\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20a29530-b1ae-4680-85ce-1a82a400dc0b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8fa8651d-e631-4698-b711-7728b85e33d6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "[AIS] Gestión de consentimientos",
			"item": [
				{
					"name": "COR201_SolicitarConsentimiento_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd770c55-60a9-43b0-9839-1a8d5d9adb92",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP CREATE CONSENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S07_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var moment = require('moment');",
									"pm.globals.set(\"endDate\",moment().add(60, 'days').format('YYYY-MM-DD'));",
									"pm.globals.set(\"recurringIndicator\",true);",
									"pm.globals.set(\"frequencyPerDay\",4);",
									"",
									"switch (pm.variables.get(\"testScope\")){",
									"    case \"AIS Cuentas\": {",
									"        pm.globals.set(\"accountType\",\"iban\");",
									"        //pm.globals.set(\"accountId\",\"iban\");",
									"    }",
									"    break;",
									"    case \"AIS Tarjetas\":{",
									"        pm.globals.set(\"accountType\",\"pan\");",
									"        //pm.globals.set(\"accountId\",\"maskedPan\");",
									"    }",
									"    break;",
									"} ",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "805b7b5c-60ae-42ee-a8ca-f5da4fab1162",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"if (pm.response.code == 500){",
									"    switch (idTest) {",
									"        case \"CUE181F\":{",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"EXPECTED ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        }",
									"        break;",
									"        default: {",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"        }",
									"    }",
									"}else {",
									"    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    // Control de excepción de Body Response",
									"    try {",
									"        var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"        if (jsonDataResponse){",
									"            // Almacenar el jsonData Response (Body)",
									"            //var jsonDataResponse = pm.response.json();",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentId exists -> \" + jsonDataResponse.consentId, function () {",
									"                if(pm.expect(jsonDataResponse,\"consentId property exists\").to.have.property('consentId')){",
									"                    pm.globals.set(\"consentId\", jsonDataResponse.consentId);",
									"                    //console.log(\"consentId \" + jsonDataResponse.consentId);    ",
									"                }",
									"            });",
									"            ",
									"            pm.globals.unset(\"recurringIndicator\");",
									"            pm.globals.set(\"recurringIndicator\", pm.variables.get(\"recurringIndicator\"));",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Recurring Incicator is -> \" + pm.globals.get(\"recurringIndicator\"), function (){",
									"                pm.expect(pm.globals.get(\"recurringIndicator\"),\"Recurring Incicator is \" + pm.globals.get(\"recurringIndicator\")).to.be.eql(pm.variables.get(\"recurringIndicator\"));",
									"            });",
									"            ",
									"            pm.globals.unset(\"validUntil\");",
									"            pm.globals.set(\"validUntil\", pm.globals.get(\"endDate\"));",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Valid Until -> \" + pm.globals.get(\"endDate\"), function (){",
									"                pm.expect(pm.globals.get(\"endDate\"),\"Recurring Incicator is \" + pm.globals.get(\"endDate\")).to.be.eql(pm.globals.get(\"endDate\"));",
									"            });",
									"            ",
									"            pm.globals.unset(\"frequencyPerDay\");",
									"            pm.globals.set(\"frequencyPerDay\", pm.variables.get(\"frequencyPerDay\"));",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Frequency Per Day is -> \" + pm.globals.get(\"frequencyPerDay\"), function (){",
									"                pm.expect(pm.globals.get(\"frequencyPerDay\"),\"Recurring Incicator is \" + pm.globals.get(\"frequencyPerDay\")).to.be.eql(pm.variables.get(\"frequencyPerDay\"));",
									"            });",
									"            ",
									"        } else { // Reportamos error de Body",
									"            ",
									"            //if  ((idtest != \"CUEXXX\") && (idtest != \"CUEXXX\") && (idtest != \"CUEXXX\")){",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            //}",
									"            ",
									"        }",
									"    } catch (e) {",
									"        console.log(\"There was an error parsing JSON Body \", e);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "TPP-Redirect-URI",
								"value": "{{redirectUri}}?OK=true",
								"type": "text"
							},
							{
								"key": "TPP-Nok-Redirect-URI",
								"value": "{{redirectUri}}?OK=false",
								"type": "text"
							},
							{
								"key": "TPP-Explicit-Authorisation-Preferred",
								"value": "true",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"access\": {\r\n\t\"accounts\" :[\r\n\t\t{\"{{accountType}}\": \"{{accountId}}\"}\r\n\t],\r\n\t\"balances\" :[\r\n\t\t{\"{{accountType}}\": \"{{accountId}}\"}\r\n\t],\r\n\t\"transactions\" : [\r\n\t\t{\"{{accountType}}\": \"{{accountId}}\"}\r\n\t]\r\n},\r\n\"recurringIndicator\": \"{{recurringIndicator}}\",\r\n\"validUntil\": \"{{endDate}}\",\r\n\"frequencyPerDay\": \"{{frequencyPerDay}}\",\r\n\"combinedServiceIndicator\": false\r\n}"
						},
						"url": {
							"raw": "{{provider}}/v1/consents",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Solicitud+consentimientos\n\nCon este servicio, un TPP a través del HUB puede solicitar un consentimiento para acceder a las cuentas del PSU. Esta solicitud puede ser sobre unas cuentas indicadas o no. Por esto, la solicitud de consentimiento tiene estas variantes:\n• Solicitar consentimiento sobre cuentas indicadas  \n• Solicitar consentimiento para obtener listado de todas las cuentas disponibles \n• Solicitar consentimiento sin indicar cuentas  \n• Solicitar consentimiento para obtener acceso a todas las cuentas para todos los servicios AIS de PSD2 \n\nNota: Cada solicitud de consentimiento generará un nuevo recurso, es decir, un nuevo consentId."
					},
					"response": []
				},
				{
					"name": "INTERNAL _spa - Get Internal Consent_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0e5e7b7-8ffb-4c54-8e95-c4d59e2bd438",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Request Validations **************************************",
									"            //====================",
									"            //var dataBodyRequest = request.data;",
									"            //var jsonDataBodyRequest = JSON.parse(request.data);",
									"            //var requestURL = pm.request.url;",
									"            //var requestHeaders = pm.request.headers;",
									"            //var jsonRequestHeaders = JSON.stringify(pm.request.headers);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** Test Data / Request Validations ***********\", function (){",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"            ",
									"            // IBAN de la petición",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Requested \" + pm.globals.get(\"accountType\") + \" \" +  \"-> \" + pm.variables.get(\"accountId\"), function (){",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** Response Validations ***********\", function (){",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"            ",
									"            pm.globals.set(\"consentRequest\", responseBody);",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentId exists -> \" + jsonDataResponse.consentId, function () {",
									"                if(pm.expect(jsonDataResponse,\"consentId property exists\").to.have.property('consentId')){",
									"                    pm.globals.set(\"consentId\", jsonDataResponse.consentId);",
									"                    //console.log(\"consentId \" + jsonDataResponse.consentId);",
									"                }",
									"            });",
									"            ",
									"            pm.globals.set(\"consentFound\", 0);",
									"            Object.keys(jsonDataResponse.resources).forEach(function(jB){",
									"                var arr = jsonDataResponse.resources[jB];",
									"                //console.log(arr); //will print the array belongs to each property.",
									"                //console.log(\"******************* IBAN: \"+ pm.variables.get(\"iban\"));",
									"                var internalAccountId = pm.variables.get(\"accountId\");",
									"                if (pm.globals.get(\"accountType\") == \"maskedPan\") {",
									"                    internalAccountId = pm.variables.get(\"accountId\").replace('********','**');",
									"                }  ",
									"                if (arr.publicId==internalAccountId) {",
									"                    //console.log(\"works\");",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Accounts Consents are ok -> \" + pm.variables.get(\"accountId\") + \" -> AC: \" + arr.grants.ACCOUNTS, function () {",
									"                        pm.expect(arr.grants.ACCOUNTS,internalAccountId + \" Accounts consent is ok\").to.be.true;",
									"                    });",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Balances Consents are ok -> \" + pm.variables.get(\"accountId\") +\" -> BA: \" + arr.grants.BALANCES, function () {",
									"                        pm.expect(arr.grants.BALANCES,internalAccountId + \" Balances consent is ok\").to.be.true;",
									"                    });",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions Consents are ok -> \" + pm.variables.get(\"accountId\") + \" -> TR: \" + arr.grants.TRANSACTIONS, function () {",
									"                        pm.expect(arr.grants.TRANSACTIONS,internalAccountId + \" Transactions consent is ok\").to.be.true;",
									"                    });",
									"                    pm.globals.set(\"consentFound\", pm.variables.get(\"consentFound\") + 1);",
									"                    //console.log (\"*********************** TRUE ***************************\");",
									"                } else {",
									"                    pm.globals.set(\"consentFound\", pm.variables.get(\"consentFound\") + 0);",
									"                }",
									"            });",
									"            if (pm.variables.get(\"consentFound\") < 1){",
									"                switch(idTest) {",
									"                    case \"CUE181F\":{",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + pm.variables.get(\"accountId\") + \" \" + pm.globals.get(\"accountType\")+ \" has no consent to be listed \", function () {",
									"                            pm.expect(1).to.eql(1);",
									"                        });",
									"                        console.log(\"*********** CUE181F\");    ",
									"                    }",
									"                    break;",
									"                    default: {",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + pm.variables.get(\"accountId\") + \" Consent iban is not found on the list \", function () {",
									"                            pm.expect(1).to.eql(2);",
									"                        });",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b32e7beb-f856-43a8-b547-5479ee56f72e",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA GET INTERNAL CONSENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S08_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Origin",
								"value": "{{caserver}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/consents/{{consentId}}?state={{state}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							],
							"query": [
								{
									"key": "state",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL _spa - Update Internal Consent_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f56c9724-8c6a-4cdb-a4b4-d94368e10041",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 400",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            if (jsonDataResponse.otp.otpType === undefined){",
									"                pm.globals.set(\"otpType\",\"unknown\");",
									"            } else {",
									"                pm.globals.set(\"otpType\",jsonDataResponse.otp.otpType);",
									"                pm.globals.set(\"vtpc2Array\",jsonDataResponse.otp.codesCard);",
									"                console.log(\"array tarjeta GLOBAL:::::::\",pm.globals.get(\"vtpc2Array\"));",
									"            }",
									"            ",
									"            // Validar que existe un Payment OTP Type en el Body de la respuesta",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment OTP Type exists -> \" + jsonDataResponse.otp.otpType, function (){",
									"                pm.expect(jsonDataResponse.otp.otpType,\"Payment OTP Type exists \").to.exist;",
									"            });",
									"            ",
									"            switch(idTest) {",
									"              case \"CUE181F\":{",
									"                console.log(\"*********** CUE181F\");  ",
									"              }",
									"              break;",
									"              ",
									"              default:{",
									"                pm.globals.set(\"consentRequest\", responseBody);",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentId exists -> \" + jsonDataResponse.consent.consentId, function () {",
									"                    //console.log(\"consentId \" + jsonDataResponse.consent.consentId);",
									"                    if(pm.expect(jsonDataResponse.consent,\"consentId property exists\").to.have.property('consentId')){",
									"                        pm.globals.set(\"consentId\", jsonDataResponse.consent.consentId);",
									"                    }",
									"                });",
									"                ",
									"                var internalAccountId = pm.variables.get(\"accountId\");",
									"                if (pm.globals.get(\"accountType\") == \"maskedPan\") {",
									"                    internalAccountId = pm.variables.get(\"accountId\").replace('********','**');",
									"                }",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + pm.globals.get(\"accountType\") + \" is ok -> \" + internalAccountId, function () {",
									"                        pm.expect(jsonDataResponse.consent.resources[0].publicId,internalAccountId + pm.globals.get(\"accountType\") + \" is ok\").to.be.eql(internalAccountId);",
									"                        //console.log(\"publicId \" + jsonDataResponse.consent.resources[0].publicId);",
									"                });",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Accounts Consents are ok -> \" + pm.variables.get(\"accountId\") + \" -> AC: \" +jsonDataResponse.consent.resources[0].grants.ACCOUNTS, function () {",
									"                        pm.expect(jsonDataResponse.consent.resources[0].grants.ACCOUNTS,pm.variables.get(\"accountId\") + \" Accounts consent is ok\").to.be.true;",
									"                        //console.log(\"Accounts consent \" + jsonDataResponse.consent.resources[0].grants.ACCOUNTS);",
									"                });",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Balances Consents are ok -> \" + pm.variables.get(\"accountId\") +\" -> BA: \" + jsonDataResponse.consent.resources[0].grants.BALANCES, function () {",
									"                    pm.expect(jsonDataResponse.consent.resources[0].grants.BALANCES,pm.variables.get(\"accountId\") + \" Balances consent is ok\").to.be.true;",
									"                    //console.log(\"Balances consent \" + jsonDataResponse.consent.resources[0].grants.BALANCES);",
									"                });",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions Consents are ok -> \" + pm.variables.get(\"accountId\") + \" -> TR: \" + jsonDataResponse.consent.resources[0].grants.TRANSACTIONS, function () {",
									"                    pm.expect(jsonDataResponse.consent.resources[0].grants.TRANSACTIONS,pm.variables.get(\"accountId\") + \" Transactions consent is ok\").to.be.true;",
									"                    //console.log(\"Transactions consent \" + jsonDataResponse.consent.resources[0].grants.TRANSACTIONS);",
									"                });",
									"              }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        pm.globals.set(\"otpType\",\"unknown\");",
									"        if (pm.globals.get(\"consentFound\") === 0){",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined because of Consent\", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"        } else {",
									"            switch(idTest) {",
									"                ",
									"                //case \"CUE174F\":",
									"                case \"CUE181F\":{",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                        pm.expect(1).to.eql(1);",
									"                    });",
									"                }",
									"                break;",
									"                ",
									"                default:{",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                        pm.expect(1).to.eql(2);",
									"                    });",
									"                }",
									"            }",
									"            ",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b32e7beb-f856-43a8-b547-5479ee56f72e",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA UPDATE INTERNAL CONSENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S09_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{caserver}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{consentRequest}}"
						},
						"url": {
							"raw": "{{provider}}/v1/consents?state={{state}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents"
							],
							"query": [
								{
									"key": "state",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL _psu - get otp value_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c667dc12-ed42-4747-8391-4ed537152724",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(pm.globals.get(\"otpType\")) {",
									"              ",
									"              case \"unknown\":",
									"              case \"TPC\":{ //",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** otpType = TPC o unknown\");",
									"              break;",
									"              ",
									"              default:{ // FD y FDSMS",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.globals.set(\"otp_value\", jsonDataResponse.replace('\"','').replace('\"',''));",
									"            //console.log(\"OTP VALUE GLOBALS = \" +  pm.globals.get(\"otp_value\"));",
									"            //console.log(\"OTP VALUE = \" +  jsonDataResponse.replace('\"','').replace('\"',''));",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Has returned an OTP value -> \" + jsonDataResponse, function () {",
									"                pm.expect(pm.globals.get(\"otp_value\"),pm.globals.get(\"otp_value\") + \" -> OTP exists\").to.exist;",
									"            });",
									"            switch(pm.globals.get(\"otpType\")){",
									"              ",
									"              case \"FDSMS\": {",
									"                const cordenadas=  pm.globals.get(\"vtpc2Array\");",
									"                const cord=parseInt(pm.globals.get(\"otp_value\"));",
									"                const tarjetaCordenadas=pm.globals.get(\"otp_value\")+cordenadas[cord-1];",
									"                pm.globals.set(\"otp_value\",tarjetaCordenadas);",
									"                console.log(\"CASO FDSMS --------///////*******\",pm.globals.get(\"otp_value\") );",
									"              }",
									"              break;",
									"              case \"unknown\": {",
									"                  switch (pm.globals.get(\"otp_value\")){",
									"                    case \"01\":{ ",
									"                      pm.globals.set(\"otp_value\",\"012442\");",
									"                    }",
									"                      break;",
									"                    case \"02\": {",
									"                      pm.globals.set(\"otp_value\",\"025775\");",
									"                    }",
									"                      break;",
									"                    case \"03\": {",
									"                      pm.globals.set(\"otp_value\",\"031040\");",
									"                    }",
									"                      break;",
									"                    case \"04\": {",
									"                      pm.globals.set(\"otp_value\",\"047350\");",
									"                    }",
									"                      break;",
									"                    case \"05\": {",
									"                      pm.globals.set(\"otp_value\",\"050861\");",
									"                    }",
									"                      break;",
									"                    case \"06\": {",
									"                      pm.globals.set(\"otp_value\",\"067938\");",
									"                    }",
									"                      break;",
									"                    case \"07\": {",
									"                      pm.globals.set(\"otp_value\",\"075645\");",
									"                    }",
									"                      break;",
									"                    case \"08\": {",
									"                      pm.globals.set(\"otp_value\",\"084461\");",
									"                    }",
									"                      break;",
									"                    case \"09\": {",
									"                      pm.globals.set(\"otp_value\",\"090512\");",
									"                    }",
									"                      break;",
									"                    case \"10\": {",
									"                      pm.globals.set(\"otp_value\",\"109070\");",
									"                    }",
									"                      break;",
									"                    case \"11\": {",
									"                      pm.globals.set(\"otp_value\",\"110173\");",
									"                    }",
									"                      break;",
									"                    case \"12\": {",
									"                      pm.globals.set(\"otp_value\",\"120088\");",
									"                    }",
									"                      break;  ",
									"                    case \"13\": {",
									"                      pm.globals.set(\"otp_value\",\"132515\");",
									"                    }",
									"                      break;  ",
									"                    case \"14\": {",
									"                      pm.globals.set(\"otp_value\",\"148216\");",
									"                    }",
									"                      break;",
									"                    case \"15\": {",
									"                      pm.globals.set(\"otp_value\",\"159692\");",
									"                    }",
									"                      break;",
									"                    case \"16\": {",
									"                      pm.globals.set(\"otp_value\",\"166980\");",
									"                    }",
									"                      break;",
									"                    case \"17\": {",
									"                      pm.globals.set(\"otp_value\",\"171578\");",
									"                    }",
									"                      break;",
									"                    case \"18\": {",
									"                      pm.globals.set(\"otp_value\",\"186110\");",
									"                    }",
									"                      break;",
									"                    case \"19\": {",
									"                      pm.globals.set(\"otp_value\",\"190912\");",
									"                    }",
									"                      break;",
									"                    case \"20\": {",
									"                      pm.globals.set(\"otp_value\",\"209784\");",
									"                    }",
									"                      break;",
									"                    case \"21\": {",
									"                      pm.globals.set(\"otp_value\",\"211204\");",
									"                    }",
									"                      break;",
									"                    case \"22\": {",
									"                      pm.globals.set(\"otp_value\",\"225277\");",
									"                    }",
									"                      break;",
									"                    case \"23\": {",
									"                      pm.globals.set(\"otp_value\",\"232798\");",
									"                    }",
									"                      break;",
									"                    case \"24\": {",
									"                      pm.globals.set(\"otp_value\",\"247460\");",
									"                    }",
									"                      break;",
									"                    case \"25\": {",
									"                      pm.globals.set(\"otp_value\",\"253263\");",
									"                    }",
									"                      break;",
									"                    case \"26\": {",
									"                      pm.globals.set(\"otp_value\",\"265606\");",
									"                    }",
									"                      break;",
									"                    case \"27\": {",
									"                      pm.globals.set(\"otp_value\",\"273756\");",
									"                    }",
									"                      break;",
									"                    case \"28\": {",
									"                      pm.globals.set(\"otp_value\",\"282270\");",
									"                    }",
									"                      break;",
									"                    case \"29\": {",
									"                      pm.globals.set(\"otp_value\",\"295198\");",
									"                    }",
									"                      break;",
									"                    case \"30\": {",
									"                      pm.globals.set(\"otp_value\",\"301893\");",
									"                    }",
									"                      break;",
									"                    case \"31\": {",
									"                      pm.globals.set(\"otp_value\",\"310806\");",
									"                    }",
									"                      break;",
									"                    case \"32\": {",
									"                      pm.globals.set(\"otp_value\",\"325563\");",
									"                    }",
									"                      break;  ",
									"                    case \"33\": {",
									"                      pm.globals.set(\"otp_value\",\"333530\");",
									"                    }",
									"                      break;  ",
									"                    case \"34\": {",
									"                      pm.globals.set(\"otp_value\",\"341907\");",
									"                    }",
									"                      break;",
									"                    case \"35\": {",
									"                      pm.globals.set(\"otp_value\",\"354200\");",
									"                    }",
									"                      break;",
									"                    case \"36\": {",
									"                      pm.globals.set(\"otp_value\",\"363038\");",
									"                    }",
									"                      break;",
									"                    case \"37\": {",
									"                      pm.globals.set(\"otp_value\",\"372289\");",
									"                    }",
									"                      break;",
									"                    case \"38\": {",
									"                      pm.globals.set(\"otp_value\",\"383862\");",
									"                    }",
									"                      break;",
									"                    case \"39\": {",
									"                      pm.globals.set(\"otp_value\",\"398584\");",
									"                    }",
									"                      break;",
									"                    case \"40\": {",
									"                      pm.globals.set(\"otp_value\",\"407069\");",
									"                    }",
									"                      break;",
									"                    case \"41\": {",
									"                      pm.globals.set(\"otp_value\",\"414996\");",
									"                    }",
									"                      break;",
									"                    case \"42\": {",
									"                      pm.globals.set(\"otp_value\",\"423678\");",
									"                    }",
									"                      break;",
									"                    case \"43\": {",
									"                      pm.globals.set(\"otp_value\",\"437276\");",
									"                    }",
									"                      break;",
									"                    case \"44\": {",
									"                      pm.globals.set(\"otp_value\",\"444590\");",
									"                    }",
									"                      break;",
									"                    case \"45\": {",
									"                      pm.globals.set(\"otp_value\",\"451641\");",
									"                    }",
									"                      break;",
									"                    case \"46\": {",
									"                      pm.globals.set(\"otp_value\",\"465694\");",
									"                    }",
									"                      break;",
									"                    case \"47\": {",
									"                      pm.globals.set(\"otp_value\",\"475041\");",
									"                    }",
									"                      break;",
									"                    case \"48\": {",
									"                      pm.globals.set(\"otp_value\",\"482740\");",
									"                    }",
									"                      break;",
									"                    case \"49\": {",
									"                      pm.globals.set(\"otp_value\",\"492566\");",
									"                    }",
									"                      break;",
									"                    case \"50\": {",
									"                      pm.globals.set(\"otp_value\",\"501111\");",
									"                    }",
									"                      break;",
									"                    case \"51\": {",
									"                      pm.globals.set(\"otp_value\",\"515116\");",
									"                    }",
									"                      break;",
									"                    case \"52\": {",
									"                      pm.globals.set(\"otp_value\",\"525139\");",
									"                    }",
									"                      break;  ",
									"                    case \"53\": {",
									"                      pm.globals.set(\"otp_value\",\"533427\");",
									"                    }",
									"                      break;  ",
									"                    case \"54\": {",
									"                      pm.globals.set(\"otp_value\",\"540838\");",
									"                    }",
									"                      break;",
									"                    case \"55\": {",
									"                      pm.globals.set(\"otp_value\",\"550586\");",
									"                    }",
									"                      break;",
									"                    case \"56\": {",
									"                      pm.globals.set(\"otp_value\",\"562490\");",
									"                    }",
									"                      break;",
									"                    case \"57\": {",
									"                      pm.globals.set(\"otp_value\",\"578290\");",
									"                    }",
									"                      break;",
									"                    case \"58\": {",
									"                      pm.globals.set(\"otp_value\",\"583692\");",
									"                    }",
									"                      break;",
									"                    case \"59\": {",
									"                      pm.globals.set(\"otp_value\",\"593117\");",
									"                    }",
									"                      break;",
									"                    case \"60\": {",
									"                      pm.globals.set(\"otp_value\",\"608671\");",
									"                    }",
									"                      break;",
									"                    case \"61\": {",
									"                      pm.globals.set(\"otp_value\",\"611006\");",
									"                    }",
									"                      break;",
									"                    case \"62\": {",
									"                      pm.globals.set(\"otp_value\",\"622610\");",
									"                    }",
									"                      break;",
									"                    case \"63\": {",
									"                      pm.globals.set(\"otp_value\",\"638995\");",
									"                    }",
									"                      break;",
									"                    case \"64\": {",
									"                      pm.globals.set(\"otp_value\",\"644126\");",
									"                    }",
									"                      break;",
									"                    case \"65\": {",
									"                      pm.globals.set(\"otp_value\",\"652228\");",
									"                    }",
									"                      break;",
									"                    case \"66\": {",
									"                      pm.globals.set(\"otp_value\",\"664720\");",
									"                    }",
									"                      break;",
									"                    case \"67\": {",
									"                      pm.globals.set(\"otp_value\",\"673420\");",
									"                    }",
									"                      break;",
									"                    case \"68\": {",
									"                      pm.globals.set(\"otp_value\",\"682472\");",
									"                    }",
									"                      break;",
									"                    case \"69\": {",
									"                      pm.globals.set(\"otp_value\",\"691176\");",
									"                    }",
									"                      break;",
									"                    case \"70\": {",
									"                      pm.globals.set(\"otp_value\",\"703381\");",
									"                    }",
									"                      break;",
									"                    case \"71\": {",
									"                      pm.globals.set(\"otp_value\",\"710922\");",
									"                    }",
									"                      break;",
									"                    case \"72\": {",
									"                      pm.globals.set(\"otp_value\",\"721769\");",
									"                    }",
									"                      break;  ",
									"                    case \"73\": {",
									"                      pm.globals.set(\"otp_value\",\"732656\");",
									"                    }",
									"                      break;  ",
									"                    case \"74\": {",
									"                      pm.globals.set(\"otp_value\",\"740138\");",
									"                    }",
									"                      break;",
									"                    case \"75\": {",
									"                      pm.globals.set(\"otp_value\",\"758012\");",
									"                    }",
									"                      break;",
									"                    case \"76\": {",
									"                      pm.globals.set(\"otp_value\",\"763263\");",
									"                    }",
									"                      break;",
									"                    case \"77\": {",
									"                      pm.globals.set(\"otp_value\",\"770067\");",
									"                    }",
									"                      break;",
									"                    case \"78\": {",
									"                      pm.globals.set(\"otp_value\",\"780528\");",
									"                    }",
									"                      break;",
									"                    case \"79\": {",
									"                      pm.globals.set(\"otp_value\",\"794045\");",
									"                    }",
									"                      break;",
									"                    case \"80\": {",
									"                      pm.globals.set(\"otp_value\",\"806776\");",
									"                    }",
									"                      break;",
									"                    default:{",
									"                      pm.globals.set(\"otp_value\",\"000000\");",
									"                    }",
									"                  }",
									"                  ",
									"                console.log(\"*********** otpType = FDSMS o unknown\");  ",
									"              }",
									"              break;",
									"              ",
									"              default:{ // FD",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"OTP value has a correct length of -> \" + pm.globals.get(\"otp_value\").length, function () {",
									"                    pm.expect(pm.globals.get(\"otp_value\"),pm.globals.get(\"otp_value\") + \" -> OTP size of 6 is ok \" + pm.globals.get(\"otp_value\").lengt).to.be.lengthOf(6);",
									"                });",
									"              }",
									"            }",
									"            pm.globals.set(\"otpCoordinate\", pm.globals.get(\"otp_value\").substring(0,2));",
									"            pm.globals.set(\"otpKey\", pm.globals.get(\"otp_value\").substring(2,6));",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(pm.globals.get(\"otpType\")) {",
									"            ",
									"            case \"TPC\":",
									"            case \"unknown\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d0239f1-868c-4394-a405-2f8443394c72",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"GET OTP VALUE \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"\";",
									"const provider = pm.environment.get(\"caAPIsCore\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S10_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "HEADER.APPLICATIONID",
								"value": "appId"
							},
							{
								"key": "HEADER.TRACKING_ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/no-prod/v1/otp",
							"host": [
								"{{provider}}"
							],
							"path": [
								"no-prod",
								"v1",
								"otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL _spa - Activate Internal Consent_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a39c7ed9-6371-4ed9-a1ae-fd1ebf7c81b3",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN TARJETAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else {",
									"            switch(pm.globals.get(\"otpType\")) {",
									"      ",
									"              case \"unknown\":{",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is-> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });  ",
									"              }",
									"              break;",
									"             ",
									"              case \"TPC\":{ //",
									"                console.log(\"********************** FIRMA TPC FUERA DE SCOPE: \");",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.error + \" / \" + jsonDataResponse.error_description + \" -> Firma TPC Fuera de Alcance \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"                ",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** otpType = TPC o unknown\");",
									"              break;",
									"              ",
									"              default:{",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\")+ \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"                });",
									"              }",
									"            }",
									"            postman.setNextRequest(null);",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"    // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"    switch(pm.globals.get(\"otpType\")) {",
									"      ",
									"      case \"unknown\":{",
									"        // Verificar que el Status Code es 500",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is-> 500\", function () {",
									"            pm.response.to.have.status(500);",
									"        });  ",
									"      }",
									"      break;",
									"     ",
									"      case \"TPC\":{ //",
									"        console.log(\"********************** FIRMA TPC FUERA DE SCOPE: \");",
									"        /*",
									"        if (jsonDataResponse.error === undefined) {",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> -> Firma TPC Fuera de Alcance \", function () {",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"        } else {",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.error + \" / \" + jsonDataResponse.error_description + \" -> Firma TPC Fuera de Alcance \", function () {",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"        }",
									"        */",
									"        // Verificar que el Status Code es 500",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Expected ERROR Status code is -> 500\", function () {",
									"            pm.response.to.have.status(500);",
									"        });",
									"      }",
									"      console.log(\"*********** otpType = TPC o unknown\");",
									"      break;",
									"      ",
									"      default:{ // FD y FDSMS",
									"        if (pm.globals.get(\"consentFound\") === 0){",
									"            // Verificar que el Status Code es 500",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Consent Not Found \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"        } else {",
									"            switch(idTest) {",
									"              /*",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 400",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 401\", function () {",
									"                    pm.response.to.have.status(401);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"                if (pm.globals.get(\"otpType\") == \"FD\"){",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Tipo de Firma es OK -> \" + pm.globals.get(\"otpType\"), function () {",
									"                        pm.expect(pm.globals.get(\"otpType\"),\" Tipo de Firma es OK -> \" + pm.globals.get(\"otpType\")).to.be.eql(\"FD\");",
									"                    });",
									"                } else if (pm.globals.get(\"otpType\") == \"FDSMS\") {",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Tipo de Firma es OK -> \" + pm.globals.get(\"otpType\"), function () {",
									"                        pm.expect(pm.globals.get(\"otpType\"),\" Tipo de Firma es OK -> \" + pm.globals.get(\"otpType\")).to.be.eql(\"FDSMS\");",
									"                    });",
									"                }",
									"              }",
									"            }",
									"        }",
									"      }",
									"    }",
									"",
									"// ******************************** Response Headers Assertions **************************************",
									"    // Control de excepción de Headers Response",
									"    try {",
									"        var jsonHeadersResponse = JSON.stringify(pm.response.headers);",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"        if (jsonHeadersResponse){",
									"            if (pm.globals.get(\"consentFound\") === 0){",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined because of Consent\", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }else{",
									"            if  ((pm.globals.get(\"otpType\") == \"TPC\") || (pm.globals.get(\"otpType\") == \"unknown\")){",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Response Headers are Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            } else {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Response Headers are Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"      ",
									"    } catch (e) {",
									"        console.log(\"There was an error parsing JSON Headers \", e);",
									"    }",
									"    ",
									"    if (pm.globals.get(\"otpType\") == \"TPC\") {",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> -> Firma TPC Fuera de Alcance \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"        postman.setNextRequest(null);",
									"    }",
									"    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"        pm.expect(1).to.eql(1);",
									"    });",
									"    ",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2af57e04-1b8c-420e-9da6-8eaa62136650",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA CONFIRM \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S11_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"//OTP obtenido manualmente desde BSO",
									"//pm.globals.set(\"otp_value\", 601419);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{caserver}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "HEADER.OTP_PIN",
								"value": "{{pass}}"
							},
							{
								"key": "HEADER.OTP_KEY",
								"value": "{{otp_value}}"
							},
							{
								"key": "HEADER.OTP_TYPE",
								"value": "{{otpType}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/consents/{{consentId}}/activate?state={{state}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"activate"
							],
							"query": [
								{
									"key": "state",
									"value": "{{state}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "COR202_RecuperarInformacionDelConsentimiento_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb3bba21-643c-407a-9488-a7aec03e5099",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP GET CONSENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S07_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var moment = require('moment');",
									"//pm.globals.set(\"endDate\",moment().add(1, 'month').format('YYYY-MM-DD'));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47128a8f-f381-497e-961f-09a4766fd3b5",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + pm.globals.get(\"accountType\") + \" is ok -> \" + pm.variables.get(\"accountId\"), function () {",
									"                if (pm.globals.get(\"accountType\") == \"iban\"){",
									"                    pm.expect(jsonDataResponse.access.accounts[0].iban,pm.variables.get(\"accountId\") + \" Accounts Iban is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                    pm.expect(jsonDataResponse.access.balances[0].iban,pm.variables.get(\"accountId\") + \" Balances Iban is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                    pm.expect(jsonDataResponse.access.transactions[0].iban,pm.variables.get(\"accountId\") + \" Transactions Iban is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                }else if (pm.globals.get(\"accountType\") == \"maskedPan\") {",
									"                    pm.expect(jsonDataResponse.access.accounts[0].maskedPan,pm.variables.get(\"accountId\") + \" Accounts MaskedPan is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                    pm.expect(jsonDataResponse.access.balances[0].maskedPan,pm.variables.get(\"accountId\") + \" Balances MaskedPan is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                    pm.expect(jsonDataResponse.access.transactions[0].maskedPan,pm.variables.get(\"accountId\") + \" Transactions MaskedPan is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                }",
									"            });",
									"            ",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentStatus is OK -> \" + jsonDataResponse.consentStatus + \" until \" + jsonDataResponse.validUntil, function () {",
									"                    pm.expect(jsonDataResponse.consentStatus,\"consentStatus is empty\").to.be.eql(\"empty\");",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                  ",
									"                //Se verifica que se está devolviendo la info del Recurring Indicator es el mismo que el creado en el consentimiento",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"recurringIndicator is OK -> \" + jsonDataResponse.recurringIndicator, function (){",
									"                    pm.expect(jsonDataResponse.recurringIndicator,\"recurringIndicator is OK \").to.be.eql(JSON.parse(pm.globals.get(\"recurringIndicator\")));",
									"                });",
									"                ",
									"                //Se verifica que se está devolviendo la info del Valid Until es el mismo que el creado en el consentimiento",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ValidUntil is OK -> \" + jsonDataResponse.validUntil, function (){",
									"                    pm.expect(jsonDataResponse.validUntil,\"ValidUntil is OK \").to.be.eql(pm.globals.get(\"validUntil\"));",
									"                });",
									"                ",
									"                //Se verifica que se está devolviendo la info del Frequency per Day es el mismo que el creado en el consentimiento",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"FrequencyperDay is OK -> \" + jsonDataResponse.frequencyPerDay, function (){",
									"                    pm.expect(jsonDataResponse.frequencyPerDay,\"FrequencyperDay is OK \").to.be.eql(parseInt(pm.globals.get(\"frequencyPerDay\")));",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentStatus is OK -> \" + jsonDataResponse.consentStatus + \" until \" + jsonDataResponse.validUntil, function () {",
									"                    pm.expect(jsonDataResponse.consentStatus,\"consentStatus is valid\").to.be.eql(\"valid\");",
									"                });",
									"              }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"                ",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/consents/{{consentId}}?",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							],
							"query": [
								{
									"key": "tppRedirectPreferred",
									"value": "true",
									"disabled": true
								},
								{
									"key": "withBalances",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Detalle+consentimientos"
					},
					"response": []
				},
				{
					"name": "COR203_ObtenerEstadoDelConsentimiento_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb3bba21-643c-407a-9488-a7aec03e5099",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP CONSENT STATUS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S07_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var moment = require('moment');",
									"//pm.globals.set(\"endDate\",moment().add(1, 'month').format('YYYY-MM-DD'));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "47128a8f-f381-497e-961f-09a4766fd3b5",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentStatus is OK -> \" + jsonDataResponse.consentStatus, function () {",
									"                    pm.expect(jsonDataResponse.consentStatus,\"consentStatus is empty\").to.be.eql(\"empty\");",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                  ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"consentStatus is OK -> \" + jsonDataResponse.consentStatus, function () {",
									"                    pm.expect(jsonDataResponse.consentStatus,\"consentStatus is valid\").to.be.eql(\"valid\");",
									"                });",
									"              }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"                ",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7"
							},
							{
								"key": "HUB-Request-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"type": "text",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"type": "text",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"type": "text",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"type": "text",
								"value": "BDE"
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"type": "text",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"type": "text",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"type": "text",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"type": "text",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"type": "text",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"description": "Obligatorio",
								"key": "Digest",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"type": "text",
								"value": "TODO"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "HEADER.ENV",
								"type": "text",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/consents/{{consentId}}/status?",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}",
								"status"
							],
							"query": [
								{
									"key": "tppRedirectPreferred",
									"value": "true",
									"disabled": true
								},
								{
									"key": "withBalances",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Detalle+consentimientos"
					},
					"response": []
				}
			],
			"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=20221836\n\n\nPara que un TPP pueda acceder a los datos de un cliente, es obligatorio realizar una gestión previa de consentimientos donde se acuerda entre el PSU, TPP y la entidad que datos se van a compartir y que condiciones.\n\nLa información que puede un PSU compartir con un TPP está dentro del alcance de AIS consultable en Alcance de Productos\n\nPara que un TPP pueda iniciar este proceso, deberá obtener un token para poder realizar llamadas a la API. El token se obtiene mediante el [Login] Autenticación OAuth (PreStep).\n\nAdicionalmente, los PSU podrán gestionar sus consentimientos AIS desde los portales corporativos. Para más información sobre la gestión de consentimientos desde otros canales ir a [AIS] Gestión de consentimientos desde portales corporativos."
		},
		{
			"name": "[FCS] Confirmación disponibilidad de fondos",
			"item": [
				{
					"name": "COR301_ConfirmacionFondos_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "235c1a58-17ef-46e5-b4d6-6eb95f53aee3",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP FUNDS CONFIRMATION \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"",
									"// https://uat.api.bancsabadell.com:8443/psd2/api/fcs/psd2-service/v1/funds-confirmations \\",
									"",
									"// https://uat.api.bancsabadell.com:8443/UAT/front/psd2/api/fcs/psd2-service/v1/funds-confirmations",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S15_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "439253dd-8e33-46bd-b560-de4df8e51c80",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 400",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF011F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{",
									"                // Validar que la Disponibilidad de Fondos es false en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Funds Availability is OK -> \" + jsonDataResponse.fundsAvailable, function (){",
									"                    pm.expect(jsonDataResponse.fundsAvailable,\"Funds Availability OK is \").to.be.false;",
									"                });",
									"                }",
									"                break;",
									"                */",
									"              default:{",
									"                // Validar que la Disponibilidad de Fondos es true en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Funds Availability is OK -> \" + jsonDataResponse.fundsAvailable, function (){",
									"                    pm.expect(jsonDataResponse.fundsAvailable,\"Funds Availability OK is \").to.be.true;",
									"                });",
									"              }",
									"            }            ",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"TRF011F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text",
								"description": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account\": {\n    \"iban\": \"{{iban}}\"\n  },\n  \"payee\": \"Nombre del Comercio\",\n  \"instructedAmount\": {\n        \"currency\": \"{{amountCurrency}}\",\n        \"amount\": \"{{amount}}\"\n    }\n}"
						},
						"url": {
							"raw": "{{provider}}/v1/funds-confirmations",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"funds-confirmations"
							]
						},
						"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=20221158"
					},
					"response": []
				}
			],
			"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=17307370\n\n\nConsideraciones Previas\nAntes de que un TPP pueda acceder a esta funcionalidad, el PSU debe primero acceder a los otros canales digitales para dar de alta de forma explicita el consentimiento a dicho TPP. Para más información sobre como dar de alta consentimientos de confirmación de fondos ir a [AIS] Gestión de consentimientos desde portales corporativos.\n\n1.- Recepción de la solicitud\n2.- Validaciones"
		},
		{
			"name": "[AIS] Información de cuentas",
			"item": [
				{
					"name": "COR205_ LecturaDeListadoDeCuentasDisponiblesCon/SinBalances _v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e18656be-8b6f-44f8-915d-1a202bbf5fc6",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP GET ACCOUNTS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S13_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"pm.globals.set(\"account-id\", pm.variables.get(\"accountId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a9b130c-3ced-4bb8-9f83-7f720ca061d3",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 401",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 401\", function () {",
									"                    pm.response.to.have.status(401);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban is ok -> \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(jsonDataResponse.accounts[0].iban,pm.variables.get(\"accountId\") + \"Iban is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"            });",
									"    ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Product name is -> \" + jsonDataResponse.accounts[0].product, function () {",
									"                pm.expect(jsonDataResponse.accounts[0].product,\"Account Product name exists\").to.exist;",
									"            });",
									"            //console.log(\"access.accounts.iban \" + jsonDataResponse.access.accounts[0].iban);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Currency is -> \" + jsonDataResponse.accounts[0].currency, function () {",
									"                pm.expect(jsonDataResponse.accounts[0].currency,\"Account Currency exists\").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Accounts link is -> \" + jsonDataResponse.accounts[0]._links.account.href, function () {",
									"                pm.expect(jsonDataResponse.accounts[0]._links.account.href,\"Accounts link is OK\").to.be.eql(\"/v1/accounts/\"+pm.variables.get(\"accountId\"));",
									"            });",
									"            //console.log(\"++++++++++++++++++ Accounts Link \" + jsonDataResponse.accounts[0]._links.accounts.href);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Balances link is -> \" + jsonDataResponse.accounts[0]._links.balances.href, function () {",
									"                pm.expect(jsonDataResponse.accounts[0]._links.balances.href,\"Balances link is OK\").to.be.eql(\"/v1/accounts/\"+pm.variables.get(\"accountId\")+\"/balances\");",
									"            });",
									"            //console.log(\"++++++++++++++++++ Balances Link \" + jsonDataResponse.accounts[0]._links.balances.href);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions link is -> \" + jsonDataResponse.accounts[0]._links.transactions.href, function () {",
									"                pm.expect(jsonDataResponse.accounts[0]._links.transactions.href,\"Balances link is OK\").to.be.eql(\"/v1/accounts/\"+pm.variables.get(\"accountId\")+\"/transactions\");",
									"            });",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Access-Counter",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/accounts",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"accounts"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+listado+Cuentas\n\nEste servicio permite obtener un listado de cuentas del PSU, incluyendo los balances de las cuentas si ha sido requerido y el consentimiento dispone del mismo. \n\nEsta petición es utilizada tanto para el listado de cuentas disponibles como para el listado de detalles de cuentas. Dependiendo del consentimiento utilizado en la petición.\n\nComo requisito, se asume que el PSU ha dado su consentimiento para este acceso y ha sido almacenado por el ASPSP."
					},
					"response": []
				},
				{
					"name": "COR207_LecturaDeDetallesDeCuentaCon/SinBalances_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e18656be-8b6f-44f8-915d-1a202bbf5fc6",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ResourceId is -> \" + jsonDataResponse.account.resourceId, function () {",
									"                pm.expect(jsonDataResponse.account.resourceId,\" ResourceId exists \").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban is OK -> \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(jsonDataResponse.account.iban,pm.variables.get(\"accountId\") + \"Iban is OK \").to.be.eql(pm.variables.get(\"accountId\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Currency exists -> \" + jsonDataResponse.account.currency, function () {",
									"                pm.expect(jsonDataResponse.account.currency,\"Account Currency exists \").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Product name is -> \" + jsonDataResponse.account.product, function () {",
									"                pm.expect(jsonDataResponse.account.product,\" Account Product name exists \").to.exist;",
									"            });",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a9b130c-3ced-4bb8-9f83-7f720ca061d3",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ResourceId is -> \" + jsonDataResponse.accounts.resourceId, function () {",
									"                pm.expect(jsonDataResponse.accounts.resourceId,\" ResourceId exists \").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban is OK -> \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(jsonDataResponse.accounts.iban,pm.variables.get(\"accountId\") + \"Iban is OK \").to.be.eql(pm.variables.get(\"accountId\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Currency exists -> \" + jsonDataResponse.accounts.currency, function () {",
									"                pm.expect(jsonDataResponse.accounts.currency,\"Account Currency exists \").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Product name is -> \" + jsonDataResponse.accounts.product, function () {",
									"                pm.expect(jsonDataResponse.accounts.product,\" Account Product name exists \").to.exist;",
									"            });",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Access-Counter",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/accounts/{{account-id}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account-id}}"
							],
							"query": [
								{
									"key": "withBalance",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+listado+Cuentas\n\nEste servicio permite obtener un listado de cuentas del PSU, incluyendo los balances de las cuentas si ha sido requerido y el consentimiento dispone del mismo. \n\nEsta petición es utilizada tanto para el listado de cuentas disponibles como para el listado de detalles de cuentas. Dependiendo del consentimiento utilizado en la petición.\n\nComo requisito, se asume que el PSU ha dado su consentimiento para este acceso y ha sido almacenado por el ASPSP."
					},
					"response": []
				},
				{
					"name": "COR208_LecturaDeBalances_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a96a1127-89c3-414f-9ef7-48512cd0ba33",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP GET ACCOUNT BALANCES \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S16_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"pm.globals.set(\"account-id\", pm.variables.get(\"accountId\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "309fb000-bb3b-423a-8160-3ba6d4390b32",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban is OK -> \" + pm.variables.get(\"accountId\"), function () {",
									"                pm.expect(jsonDataResponse.account.iban,\"Iban is OK -> \" + pm.variables.get(\"accountId\")).to.be.eql(pm.variables.get(\"accountId\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Balance Type exists -> \" + jsonDataResponse.balances[0].balanceType, function () {",
									"                pm.expect(jsonDataResponse.balances[0].balanceType,\"Balance Type exists\" + jsonDataResponse.balances[0].balanceType).to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Current \" + jsonDataResponse.balances[0].balanceType + \" Balance Amount exists -> \" + jsonDataResponse.balances[0].balanceAmount.amount + \" \" + jsonDataResponse.balances[0].balanceAmount.currency, function () {",
									"                pm.expect(jsonDataResponse.balances[0].balanceAmount.amount,\"Account Current balance amount exists \" + jsonDataResponse.balances[0].balanceAmount.amount).to.exist;",
									"                pm.expect(typeof(JSON.parse(jsonDataResponse.balances[0].balanceAmount.amount)),\"Account Current balance amount is a number \" + jsonDataResponse.balances[0].balanceAmount.amount).to.be.eql('number');",
									"                pm.expect(jsonDataResponse.balances[0].balanceAmount.currency,\"Account Current balance currency exists \" + jsonDataResponse.balances[0].balanceAmount.currency).to.exist;",
									"            });",
									"            /*",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Exchange balance exists -> \" + jsonDataResponse.balances.exchange, function () {",
									"                pm.expect(jsonDataResponse.balances.exchange,\"Account Exchange balance exists\").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account max_authorized exists -> \" + jsonDataResponse.balances.max_authorized, function () {",
									"                pm.expect(jsonDataResponse.balances.max_authorized,\"Account max_authorized exists\").to.exist;",
									"            });",
									"            */",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Access-Counter",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/accounts/{{account-id}}/balances",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account-id}}",
								"balances"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+de+saldos+sobre+cuenta\n\nEste servicio permite obtener los balances de una cuenta determinada por su identificador. \n\nComo requisito, se asume que el PSU ha dado su consentimiento para este acceso y ha sido almacenado por el ASPSP."
					},
					"response": []
				},
				{
					"name": "COR209_LecturaDeTransaccionesCon/SinBalances_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "63e36054-0316-4342-86bc-3d6e2e758c4b",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP GET TRANSACTIONS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S14_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"pm.globals.set(\"transactionStartDate\", \"2017-02-11\");",
									"let dateStamp = new moment().format(\"YYYY-MM-DD\");",
									"pm.globals.set(\"transactionEndDate\", dateStamp);",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"pm.globals.set(\"account-id\", pm.variables.get(\"accountId\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77087b4f-5dfb-4f30-a2b7-1792351fec3d",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get(\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \" + epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function () {",
									"\tpm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        switch (idTest) {",
									"            case \"CUE174\":",
									"            case \"CUE188\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for IBAN \" + pm.variables.get(\"accountId\"), function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" : \" + jsonDataResponse.tppMessages[0].text, function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"                ",
									"                // Verificar que el Status Code es 401",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"EXPECTED ERROR Status code is -> 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"            }",
									"            break;",
									"            default: {",
									"            ",
									"                if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES",
									"        // ******************************** Validación ERRORES ESPERADOS **************************************",
									"                    switch (idTest) {",
									"                        case \"CUE172F\": {",
									"                            // Verificar que el Status Code es 400",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"EXPECTED ERROR Status code is -> 400\", function () {",
									"                                pm.response.to.have.status(400);",
									"                            });",
									"                            ",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an EXPECTED error \" + jsonDataResponse.psuMessage.substring(0,6) + \" for IBAN \" + pm.variables.get(\"accountId\"), function () {",
									"                                pm.expect(jsonDataResponse.psuMessage.substring(0,6),\"ASPSP has thrown an EXPECTED error \" + jsonDataResponse.psuMessage.substring(0,6) + \" for IBAN \" + pm.variables.get(\"accountId\")).to.be.eql(\"Z11421\");",
									"                            });",
									"                        }",
									"                        break;",
									"                        default: {",
									"                            console.log(\"********************** ERROR EN CUENTAS: \");",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> ASPSP has thrown an error for \" + pm.globals.get(\"accountType\") + \" \" + pm.variables.get(\"accountId\"), function () {",
									"                                pm.expect(1).to.eql(2);",
									"                            });",
									"                            ",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" : \" + jsonDataResponse.tppMessages[0].text, function () {",
									"                                pm.expect(1).to.eql(2);",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 401",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                                pm.response.to.have.status(401);",
									"                            });  ",
									"                        }",
									"                    }",
									"                } else { // No hay errores",
									"        // ******************************** Validación del HTTP STATUS CODE **************************************",
									"                    switch (idTest) {",
									"                        case \"CUE181F\": { //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                        \t\t//console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 1 %%%%%%%%%%%%%%%%%%%%%%%%%%\");",
									"                        \t\t// Verificar que el Status Code es 500",
									"                        \t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                        \t\t\tpm.response.to.have.status(500);",
									"                        \t\t});",
									"                        \t}",
									"                        \tconsole.log(\"*********** CUE181F\");",
									"                        \tbreak;",
									"                        default: {",
									"                        \t\t//console.log(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2 %%%%%%%%%%%%%%%%%%%%%%%%%%\");",
									"                        \t\t// Verificar que el Status Code es 200",
									"                        \t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                        \t\t\tpm.response.to.have.status(200);",
									"                        \t\t});",
									"                        \t}",
									"                        }",
									"        ",
									"        // ******************************** Response Body Assertions **************************************",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban is ok -> \" + pm.variables.get(\"accountId\"), function () {",
									"                        pm.expect(jsonDataResponse.account.iban,pm.variables.get(\"accountId\") + \"Iban is ok\").to.be.eql(pm.variables.get(\"accountId\"));",
									"                    });",
									"                    ",
									"                    if ((jsonDataResponse.transactions.booked) === undefined) {",
									"                        console.log(\"********************** Transactions Array es VACIO: \");",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban \" + pm.variables.get(\"accountId\") + \" has no transactions between the dates required\", function () {",
									"                            pm.expect(1,\"Account has no transactions between the dates required \").to.be.eql(0);",
									"                        });",
									"                    } else {   ",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Iban \" + pm.variables.get(\"accountId\") + \" has \" + (jsonDataResponse.transactions.booked).length + \" transactions (before applying any filtering) between the dates required\", function () {",
									"                            pm.expect((jsonDataResponse.transactions.booked).length,\"Account has \" + (jsonDataResponse.transactions.booked).length + \" transactions between the dates required \").to.be.gte(0);",
									"                        });",
									"        ",
									"            \t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions account.href link is -> \" + jsonDataResponse._links.account.href, function () {",
									"            \t\t\t\tpm.expect(jsonDataResponse._links.account.href, \"Transactions account.href link is OK \").to.exist;",
									"            \t\t\t});",
									"            ",
									"            \t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions first.href link is -> \" + jsonDataResponse._links.first.href, function () {",
									"            \t\t\t\tpm.expect(jsonDataResponse._links.first.href, \"Transactions first.href link is OK \").to.include(\"/transactions?bookingStatus=booked\");",
									"            \t\t\t});",
									"            ",
									"            \t\t\tif ((jsonDataResponse.transactions).length > 20){",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions previous.href link is -> \" + jsonDataResponse._links.previous.href, function () {",
									"            \t\t\t\t\tpm.expect(jsonDataResponse._links.previous.href, \"Transactions previous.href link is OK \").to.include(\"/transactions?bookingStatus=booked&entryReferenceFrom=-\");",
									"            \t\t\t\t});",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions next.href link is -> \" + jsonDataResponse._links.next.href, function () {",
									"            \t\t\t\t\tpm.expect(jsonDataResponse._links.next.href, \"Transactions next.href link is OK \").to.include(\"/transactions?bookingStatus=booked&entryReferenceFrom=\");",
									"            \t\t\t\t});",
									"            \t\t\t}",
									"        ",
									"            \t\t\tObject.keys(jsonDataResponse.transactions.booked).forEach(function (jB) {",
									"            \t\t\t\tvar arr = jsonDataResponse.transactions.booked[jB];",
									"            \t\t\t\t//console.log(\"********************** Get Transactions 2 - FOR \" + jB + \" ***************************\");",
									"            \t\t\t\t//console.log(\"Array de transactions: \" + arr); //will print the array belongs to each property.",
									"            \t\t\t\tlet index = parseInt(jB) + 1;",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" +++++++++++++++++++++++++ Transaction  \" + index + \" +++++++++++++++++++++++++\", function () {",
									"            \t\t\t\t\tpm.expect(1).to.eql(1);",
									"            \t\t\t\t});",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transaction entryReference exists -> \" + arr.entryReference, function () {",
									"            \t\t\t\t\tpm.expect(arr.entryReference, \"Transaction entryReference exists\").to.exist;",
									"            \t\t\t\t});",
									"            \t\t\t\t",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Booking date exists -> \" + arr.bookingDate, function () {",
									"            \t\t\t\t\tpm.expect(arr.bookingDate, \"Booking date exists\").to.exist;",
									"            \t\t\t\t});",
									"            ",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Amount exists -> \" + arr.transactionAmount.amount, function () {",
									"            \t\t\t\t\tpm.expect(arr.transactionAmount.amount, \"Amount exists\").to.exist;",
									"            \t\t\t\t});",
									"            ",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Currency exists -> \" + arr.transactionAmount.currency, function () {",
									"            \t\t\t\t\tpm.expect(arr.transactionAmount.currency, \"Currency exists\").to.exist;",
									"            \t\t\t\t});",
									"            ",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transaction Concept exists -> \" + arr.remittanceInformationUnstructured, function () {",
									"            \t\t\t\t\tpm.expect(arr.remittanceInformationUnstructured, \"Transaction Concept exists\").to.exist;",
									"            \t\t\t\t});",
									"            \t\t\t\t",
									"            \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Value Date date exists -> \" + arr.valueDate, function () {",
									"            \t\t\t\t\tpm.expect(arr.valueDate, \"Value date exists\").to.exist;",
									"            \t\t\t\t});",
									"            \t\t\t});",
									"            \t\t} ",
									"                }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Access-Counter",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/accounts/{{account-id}}/transactions?dateFrom={{transactionStartDate}}&dateTo={{transactionEndDate}}&bookingStatus=booked",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"accounts",
								"{{account-id}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{transactionStartDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{transactionEndDate}}"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "deltaList",
									"value": "true",
									"disabled": true
								},
								{
									"key": "withBalance",
									"value": "true",
									"disabled": true
								},
								{
									"key": "psuInvolved",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+de+movimientos+Cuentas\n\nEste servicio permite obtener las transacciones de una cuenta determinada por su identificador. \n\nComo requisito, se asume que el PSU ha dado su consentimiento para este acceso y ha sido almacenado por el ASPSP."
					},
					"response": []
				},
				{
					"name": "COR204_EliminarConsentimiento_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb3bba21-643c-407a-9488-a7aec03e5099",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP DELETE CONSENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S07_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06f7bfac-53ac-4d00-8587-e848ab0d1efc",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    console.log(\"************************* 3 ******************** \");",
									"    if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"        console.log(\"************************* 4 ******************** \");",
									"        console.log(\"********************** ERROR EN CUENTAS: \");",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> TPP has thrown an error for IBAN \" + pm.variables.get(\"accountId\"), function () {",
									"            pm.expect(1).to.eql(2);",
									"        });",
									"        ",
									"        // Verificar que el Status Code es 401",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"            pm.response.to.have.status(401);",
									"        });",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an expected error parsing JSON Body \", e);",
									"    // ******************************** Validación del HTTP STATUS CODE **************************************",
									"    switch(idTest) {",
									"        ",
									"      default:{",
									"        console.log(\"************************* 2 ******************** \");",
									"        // Verificar que el Status Code es 204",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 204\", function () {",
									"            pm.response.to.have.status(204);",
									"        });",
									"        ",
									"        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \">  -> Consent Deleted for IBAN \" + pm.variables.get(\"accountId\"), function () {",
									"            pm.expect(1).to.eql(1);",
									"        });",
									"      }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {},
						"url": {
							"raw": "{{provider}}/v1/consents/{{consentId}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"consents",
								"{{consentId}}"
							]
						},
						"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=20809545\n\nEste servicio permite solicitar la eliminación de un consentimiento previamente creado en el ASPSP. "
					},
					"response": []
				}
			],
			"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=17307385\n\n\nLos servicios de AIS (AIS: Account Information Service) sirven para que un TPP acceda a la información de cuentas y tarjetas en la que previamente un PSU otorgó consentimientos mediante [AIS] Gestión de consentimientos.\n\nPara información técnica más detalla, revisar la documentación en Dominio Cuentas/Tarjetas\n\nLos TPP podrán acceder a la información de los productos que está descrito en Alcance de Productos"
		},
		{
			"name": "[AIS] Información de tarjetas",
			"item": [
				{
					"name": "COR211_ LecturaDeListadoDeCuentasDeTarjeta _v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e18656be-8b6f-44f8-915d-1a202bbf5fc6",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"GET CARDS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S13_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"",
									"///////////////////////////////////////////////////////////////////////",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a9b130c-3ced-4bb8-9f83-7f720ca061d3",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages !== undefined) || (jsonDataResponse.error !== undefined)){ //ERRORES ",
									"            console.log(\"********************** ERROR EN TARJETAS: \");",
									"            if (jsonDataResponse.tppMessages !== undefined) {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            } else {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.error + \" / \" + jsonDataResponse.error_description + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions ************************************** ",
									"            pm.globals.set(\"tokenPan\", jsonDataResponse.cardsDetails[0].resourceId);",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Token Pan (ResourceId) is -> \" + jsonDataResponse.cardsDetails[0].resourceId, function () {",
									"                pm.expect(parseInt(jsonDataResponse.cardsDetails[0].resourceId),pm.variables.get(\"tokenPan\") + \" Token Pan (ResourceId) is ok\").to.be.eql(parseInt(pm.variables.get(\"tokenPan\")));",
									"            });",
									"            //console.log(\"TokendPan CSV: \" + pm.globals.get(\"tokenPan\") + \" is \" + typeof(pm.globals.get(\"tokenPan\")));",
									"            //console.log(\"TokendPan Response: \" + jsonDataResponse.cardsDetails[0].resourceId + \" is \" + typeof(jsonDataResponse.cardsDetails[0].resourceId));",
									"            ",
									"            pm.globals.set(\"maskedPan\", jsonDataResponse.cardsDetails[0].maskedPan);",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Masked Pan is -> \" + jsonDataResponse.cardsDetails[0].maskedPan, function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0].maskedPan,pm.variables.get(\"maskedPan\") + \" Masked Pan is ok\").to.be.eql(pm.variables.get(\"maskedPan\"));",
									"            });",
									"            console.log(\"MaskedPan CSV: \" + pm.variables.get(\"maskedPan\") + \" is \" + typeof(pm.variables.get(\"maskedPan\")));",
									"            console.log(\"MaskedPan Response: \" + jsonDataResponse.cardsDetails[0].maskedPan + \" is \" + typeof(jsonDataResponse.cardsDetails[0].maskedPan));",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Name is -> \" + jsonDataResponse.cardsDetails[0].name, function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0].name,pm.variables.get(\"cardName\") + \" Name is ok\").to.be.eql(pm.variables.get(\"cardName\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Product is -> \" + jsonDataResponse.cardsDetails[0].product, function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0].product,\"Card Product name exists\").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Account Currency is -> \" + jsonDataResponse.cardsDetails[0].currency, function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0].currency,\"Account Currency exists\").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card-Account link is -> \" + jsonDataResponse.cardsDetails[0]._links['card-account'], function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0]._links['card-account'],\"Card-Account link is OK\").to.be.eql(\"./\"+pm.variables.get(\"tokenPan\"));",
									"            });",
									"            console.log(\"++++++++++++++++++ Accounts Link \" + jsonDataResponse.cardsDetails[0]._links['card-account']);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Balances link is -> \" + jsonDataResponse.cardsDetails[0]._links.balances, function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0]._links.balances,\"Balances link is OK\").to.be.eql(\"./\"+pm.variables.get(\"tokenPan\")+\"/balances\");",
									"            });",
									"            console.log(\"++++++++++++++++++ Balances Link \" + jsonDataResponse.cardsDetails[0]._links.balances);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions link is -> \" + jsonDataResponse.cardsDetails[0]._links.transactions, function () {",
									"                pm.expect(jsonDataResponse.cardsDetails[0]._links.transactions,\"Transactions link is OK\").to.be.eql(\"./\"+pm.variables.get(\"tokenPan\")+\"/transactions\");",
									"            });",
									"            console.log(\"++++++++++++++++++ Balances Link \" + jsonDataResponse.cardsDetails[0]._links.transactions);",
									"            ",
									"            if (pm.variables.get(\"cardType\") == \"Credito\" || pm.variables.get(\"cardType\") == \"Mixta\"){",
									"                console.log(\"++++++++++++++++++ Tarjeta de Crédio o Mixta: \" + pm.variables.get(\"cardType\"));",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit amount is -> \" + jsonDataResponse.cardsDetails[0].creditLimit.amount, function () {",
									"                    pm.expect(parseInt(jsonDataResponse.cardsDetails[0].creditLimit.amount),\" Credit Limit amount is ok\").to.be.above(0);",
									"                });",
									"            }else {",
									"                console.log(\"++++++++++++++++++ Tarjeta de Débito o Prepago: \" + pm.variables.get(\"cardType\") );",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit amount is -> \" + jsonDataResponse.cardsDetails[0].creditLimit, function () {",
									"                    pm.expect(parseInt(jsonDataResponse.cardsDetails[0].creditLimit.amount),\" Credit Limit amount is ok\").to.be.eql(0);",
									"                });",
									"            }",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit currency is -> \" + jsonDataResponse.cardsDetails[0].creditLimit.currency, function () {",
									"                    pm.expect(jsonDataResponse.cardsDetails[0].creditLimit.currency,\" Credit Limit currency is ok\").to.exist;",
									"            });",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7"
							},
							{
								"key": "HUB-Request-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"type": "text",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"type": "text",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"type": "text",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"type": "text",
								"value": "BDE"
							},
							{
								"key": "Access-Counter",
								"type": "text",
								"value": "3"
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"description": "Obligatorio",
								"key": "Consent-ID",
								"type": "text",
								"value": "{{consentId}}"
							},
							{
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"type": "text",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"type": "text",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"type": "text",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"type": "text",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"type": "text",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"description": "Obligatorio",
								"key": "Digest",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"type": "text",
								"value": "TODO"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "HEADER.ENV",
								"type": "text",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/card-accounts",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"card-accounts"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+listado+Tarjetas\n\nEste servicio devuelve el listado de tarjetas sobre las que un PSU previamente concedió consentimientos para ser accesibles por un TPP.\n\nLas tarjetas que devuelve el servicio están en el campo \"accounts\" del consentimiento. Sin embargo, puede aparecer que en un consentimiento válido aparezcan tarjetas que el PSU ha dejado de ser titular durante el tiempo de vigencia del consentimiento. Para este caso el servicio no devolverá dichas tarjetas.\n\nLas tarjetas a las que un TPP puede acceder están descritos en Alcance de Productos\n\nPara la gestión de consentimientos ver mas en [AIS] Gestión de consentimientos"
					},
					"response": []
				},
				{
					"name": "COR212_LecturaDeDetallesDeCuentaDeTarjeta_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e18656be-8b6f-44f8-915d-1a202bbf5fc6",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"GET DETAILS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S15_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"",
									"///////////////////////////////////////////////////////////////////////",
									"",
									"//var idtest = pm.variables.get(\"idtest\");",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"pm.globals.set(\"account-id\", pm.variables.get(\"tokenPan\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0a9b130c-3ced-4bb8-9f83-7f720ca061d3",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages !== undefined) || (jsonDataResponse.error !== undefined)){ //ERRORES ",
									"            console.log(\"********************** ERROR EN TARJETAS: \");",
									"            if (jsonDataResponse.tppMessages !== undefined) {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            } else {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.error + \" / \" + jsonDataResponse.error_description + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*    ",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************        ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"TokenPan is ok -> \" + pm.variables.get(\"tokenPan\"), function () {",
									"                pm.expect(parseInt(jsonDataResponse.resourceId),pm.variables.get(\"tokenPan\") + \"TokenPan is ok \").to.be.eql(parseInt(pm.variables.get(\"tokenPan\")));",
									"            });",
									"        ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Masked Pan is -> \" + jsonDataResponse.maskedPan, function () {",
									"                pm.expect(jsonDataResponse.maskedPan,pm.variables.get(\"maskedPan\") + \" Masked Pan is ok \").to.be.eql(pm.variables.get(\"maskedPan\"));",
									"            });",
									"            //console.log(\"MaskedPan CSV: \" + pm.variables.get(\"maskedPan\") + \" is \" + typeof(pm.variables.get(\"maskedPan\")));",
									"            //console.log(\"MaskedPan Response: \" + jsonDataResponse.maskedPan + \" is \" + typeof(jsonDataResponse.maskedPan));",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Product name is -> \" + jsonDataResponse.product, function () {",
									"                pm.expect(jsonDataResponse.product,\"Card Product name exists \").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Currency exists -> \" + jsonDataResponse.currency, function () {",
									"                pm.expect(jsonDataResponse.currency,\"Card Currency exists \").to.exist;",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card-Account link is -> \" + jsonDataResponse._links['card-account'], function () {",
									"                pm.expect(jsonDataResponse._links['card-account'],\"Card-Account link is OK \").to.be.eql(\"./\"+pm.variables.get(\"tokenPan\"));",
									"            });",
									"            //console.log(\"++++++++++++++++++ Accounts Link \" + jsonDataResponse._links['card-account']);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Balances link is -> \" + jsonDataResponse._links.balances, function () {",
									"                pm.expect(jsonDataResponse._links.balances,\"Balances link is OK \").to.be.eql(\"./\"+pm.variables.get(\"tokenPan\")+\"/balances\");",
									"            });",
									"            //console.log(\"++++++++++++++++++ Balances Link \" + jsonDataResponse._links.balances);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions link is -> \" + jsonDataResponse._links.transactions, function () {",
									"                pm.expect(jsonDataResponse._links.transactions,\"Transactions link is OK \").to.be.eql(\"./\"+pm.variables.get(\"tokenPan\")+\"/transactions\");",
									"            });",
									"            //console.log(\"++++++++++++++++++ Balances Link \" + jsonDataResponse._links.transactions);",
									"        ",
									"            switch(pm.variables.get(\"cardType\")) {",
									"                case \"Credito\":",
									"                case \"Mixta\": {",
									"                    console.log(\"++++++++++++++++++ Tarjeta de : \" + pm.variables.get(\"cardType\") );",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit Card Amount exists and is greater than 0.00 -> \" + jsonDataResponse.creditLimit.amount, function () {",
									"                        pm.expect(jsonDataResponse.creditLimit.amount,\"Credit Limit Card Amount exists \").to.exist;",
									"                        pm.expect(parseInt(jsonDataResponse.creditLimit.amount),\"Credit Limit Card Amount is greater than 0.00 \").to.be.gt(0);",
									"                    });",
									"                ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit Card Currency exists -> \" + jsonDataResponse.creditLimit.currency, function () {",
									"                        pm.expect(jsonDataResponse.creditLimit.currency,\"Credit Limit Card Currency exists \").to.exist;",
									"                    });",
									"                }",
									"                break;",
									"                ",
									"                case \"Debito\": {",
									"                    console.log(\"++++++++++++++++++ Tarjeta de : \" + pm.variables.get(\"cardType\") );",
									"                ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit Card Amount exists and is equal to 0.00 -> \" + jsonDataResponse.creditLimit.amount, function () {",
									"                        pm.expect(jsonDataResponse.creditLimit.amount,\"Credit Limit Card Amount exists \").to.exist;",
									"                        pm.expect(parseInt(jsonDataResponse.creditLimit.amount),\"Credit Limit Card Amount is equal to 0.00 \").to.be.eql(0);",
									"                    });",
									"                ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit Card Currency exists -> \" + jsonDataResponse.creditLimit.currency, function () {",
									"                        pm.expect(jsonDataResponse.creditLimit.currency,\"Credit Limit Card Currency exists \").to.exist;",
									"                    });",
									"                }",
									"                break;",
									"                ",
									"                case \"Prepago\": {",
									"                    console.log(\"++++++++++++++++++ Tarjeta de : \" + pm.variables.get(\"cardType\") );",
									"                ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit Card Amount exists and is equal to 0.00 -> \" + jsonDataResponse.creditLimit.amount, function () {",
									"                        pm.expect(jsonDataResponse.creditLimit.amount,\"Credit Limit Card Amount exists \").to.exist;",
									"                        pm.expect(parseInt(jsonDataResponse.creditLimit.amount),\"Credit Limit Card Amount is equal to 0.00 \").to.be.eql(0);",
									"                    });",
									"                ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Credit Limit Card Currency exists -> \" + jsonDataResponse.creditLimit.currency, function () {",
									"                        pm.expect(jsonDataResponse.creditLimit.currency,\"Credit Limit Card Currency exists \").to.exist;",
									"                    });",
									"                }",
									"                break;",
									"                default:{",
									"                    //console.log(\"DADASDASDAdsa\");",
									"                }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7"
							},
							{
								"key": "HUB-Request-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"type": "text",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"type": "text",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"type": "text",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"type": "text",
								"value": "BDE"
							},
							{
								"key": "Access-Counter",
								"type": "text",
								"value": "3"
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"description": "Obligatorio",
								"key": "Consent-ID",
								"type": "text",
								"value": "{{consentId}}"
							},
							{
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"type": "text",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"type": "text",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"type": "text",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"type": "text",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"type": "text",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"description": "Obligatorio",
								"key": "Digest",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"type": "text",
								"value": "TODO"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "HEADER.ENV",
								"type": "text",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/card-accounts/{{account-id}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"card-accounts",
								"{{account-id}}"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+de+detalles+Tarjetas\n\nEste servicio devuelve los detalles de una tarjeta que un PSU previamente concedió consentimientos para ser accesibles por un TPP.\n\nLas tarjetas con consentimiento están en el campo \"accounts\" del consentimiento. Sin embargo, puede aparecer que en un consentimiento válido aparezcan tarjetas que el PSU ha dejado de ser titular durante el tiempo de vigencia del consentimiento. Para este caso el servicio no devolverá información de la tarjeta.\n\nLas tarjetas a las que un TPP puede acceder están descritos en Alcance de Productos\n\nPara la gestión de consentimientos ver mas en [AIS] Gestión de consentimientos"
					},
					"response": []
				},
				{
					"name": "COR213_LecturaDeBalancesDeCuentaDeTarjeta_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a96a1127-89c3-414f-9ef7-48512cd0ba33",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"GET BALANCES \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S16_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"",
									"///////////////////////////////////////////////////////////////////////",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"pm.globals.set(\"account-id\", pm.variables.get(\"tokenPan\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "309fb000-bb3b-423a-8160-3ba6d4390b32",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages !== undefined) || (jsonDataResponse.error !== undefined)){ //ERRORES ",
									"            console.log(\"********************** ERROR EN TARJETAS: \");",
									"            if (jsonDataResponse.tppMessages !== undefined) {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            } else {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.error + \" / \" + jsonDataResponse.error_description + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"        ",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Masked Pan is -> \" + jsonDataResponse.cardAccount.maskedPan, function () {",
									"                pm.expect(jsonDataResponse.cardAccount.maskedPan,pm.variables.get(\"maskedPan\") + \" Masked Pan is ok\").to.be.eql(pm.variables.get(\"maskedPan\"));",
									"            });",
									"",
									"            Object.keys(jsonDataResponse.balances).forEach(function(jB){",
									"                var arr = jsonDataResponse.balances[jB];",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" ++++++++++++++++++++++++++++ Balance Type  \" + jB + \" ++++++++++++++++++++++++++++ \", function (){",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"                    ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Balance Type is -> \" + arr.balanceType, function () {",
									"                    pm.expect(jsonDataResponse.balances[jB].balanceType,\"Card Balance Type exists \").to.exist;",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Currency is -> \" + arr.balanceAmount.currency, function () {",
									"                    pm.expect(jsonDataResponse.balances[jB].balanceAmount.currency,\"Card Currency exists \").to.exist;",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Amount is -> \" + arr.balanceAmount.amount, function () {",
									"                    pm.expect(jsonDataResponse.balances[jB].balanceAmount.amount,\"Card Amount exists \").to.exist;",
									"                });",
									"            });",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"} finally {",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Access-Counter",
								"value": "3",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Consent-ID",
								"value": "{{consentId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/card-accounts/{{account-id}}/balances",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"card-accounts",
								"{{account-id}}",
								"balances"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+de+saldos+Tarjetas\n\nEste servicio devuelve los saldos de una tarjeta que un PSU previamente concedió consentimientos para ser accesibles por un TPP.\n\nLas tarjetas con consentimiento están en el campo \"balances\" del consentimiento. Sin embargo, puede aparecer que en un consentimiento válido aparezcan tarjetas que el PSU ha dejado de ser titular durante el tiempo de vigencia del consentimiento. Para este caso el servicio no devolverá información de la tarjeta.\n\nLas tarjetas a las que un TPP puede acceder están descritos en Alcance de Productos\n\nPara la gestión de consentimientos ver mas en [AIS] Gestión de consentimientos"
					},
					"response": []
				},
				{
					"name": "COR214_LecturaDeTransaccionesDeCuentaDeTarjeta_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "63e36054-0316-4342-86bc-3d6e2e758c4b",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"GET TRANSACTIONS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S14_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"pm.globals.set(\"transactionStartDate\", \"2017-06-01\");",
									"let dateStamp = new moment().format(\"YYYY-MM-DD\");",
									"pm.globals.set(\"transactionEndDate\", dateStamp);",
									"",
									"",
									"///////////////////////////////////////////////////////////////////////",
									"",
									"//var idTest = pm.variables.get(\"idtest\");",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);",
									"",
									"",
									"pm.globals.set(\"account-id\", pm.variables.get(\"tokenPan\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77087b4f-5dfb-4f30-a2b7-1792351fec3d",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages !== undefined) || (jsonDataResponse.error !== undefined)){ //ERRORES ",
									"            console.log(\"********************** ERROR EN TARJETAS: \");",
									"            if (jsonDataResponse.tppMessages !== undefined) {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            } else {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.error + \" / \" + jsonDataResponse.error_description + \" -> TPP has thrown an error for MaskedPan \" + pm.variables.get(\"maskedPan\"), function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************   ",
									"            if ((jsonDataResponse.cardTransactions) === undefined) {",
									"                console.log(\"********************** Booked Array es VACIO: \");",
									"                //console.log(\"********************** Get Transactions 3 - 0 Transactions ***************************\");",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"MaskedPan \" + pm.variables.get(\"maskedPan\") + \" has no transactions between the dates required\", function () {",
									"                    pm.expect(1,\"Card has no transactions between the dates required \").to.be.eql(0);",
									"                });",
									"            } else {",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"MaskedPan \" + pm.variables.get(\"maskedPan\") + \" has \" + (jsonDataResponse.cardTransactions.booked).length + \" transactions (before applying any filtering) between the dates required\", function () {",
									"                    pm.expect((jsonDataResponse.cardTransactions.booked).length,\"Card has \" + (jsonDataResponse.cardTransactions.booked).length + \"transactions between the dates required \").to.be.gte(0);",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card-Account home link is -> \" + jsonDataResponse.cardTransactions._links.cardAccount.href, function () {",
									"                    pm.expect(jsonDataResponse.cardTransactions._links.cardAccount.href,\"Card-Account home link is OK \").to.be.eql(\"/v1/card-accounts/\" + pm.variables.get(\"tokenPan\"));",
									"                });",
									"                    ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions first link is -> \" + jsonDataResponse.cardTransactions._links.first.href, function () {",
									"                    pm.expect(jsonDataResponse.cardTransactions._links.first.href,\"Transactions first link is OK \").to.include(\"/v1/card-accounts/\" + pm.variables.get(\"tokenPan\") + \"/transactions?\");",
									"                });",
									"                ",
									"                if ((jsonDataResponse.cardTransactions.booked).length > 20){",
									"                    console.log(\"********************** Get Transactions 1 - Has transactions ***************************\");",
									"        ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions next link is -> \" + jsonDataResponse.cardTransactions._links.next.href, function () {",
									"                        pm.expect(jsonDataResponse.cardTransactions._links.next.href,\"Transactions next link is OK \").to.include(\"/v1/card-accounts/\" + pm.variables.get(\"tokenPan\") + \"/transactions?\");",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transactions previous link is -> \" + jsonDataResponse.cardTransactions._links.previous.href, function () {",
									"                        pm.expect(jsonDataResponse.cardTransactions._links.previous.href,\"Transactions previous link is OK \").to.include(\"/v1/card-accounts/\" + pm.variables.get(\"tokenPan\") + \"/transactions?\");",
									"                    });",
									"                }",
									"                Object.keys(jsonDataResponse.cardTransactions.booked).forEach(function(jB){",
									"                    var arr = jsonDataResponse.cardTransactions.booked[jB];",
									"                    let index = parseInt(jB) + 1;",
									"    \t\t\t\tpm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" +++++++++++++++++++++++++ Transaction  \" + index + \" +++++++++++++++++++++++++\", function () {",
									"    \t\t\t\t\tpm.expect(1).to.eql(1);",
									"    \t\t\t\t});",
									"                    console.log(\"********************** Get Transactions 2 - FOR \" + jB + \" ***************************\");",
									"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Entry Reference exists -> \" + arr.entryReference, function () {",
									"                        pm.expect(arr.entryReference,\"Entry Reference exists \").to.exist;",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Booking date exists -> \" + arr.bookingDate, function () {",
									"                        pm.expect(arr.bookingDate,\"Booking date exists \").to.exist;",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Original Amount exists -> \" + arr.originalAmount.amount, function () {",
									"                        pm.expect(arr.originalAmount.amount,\"Original Amount exists \").to.exist;",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Markup Fees exists -> \" + arr.markupFee, function () {",
									"                        pm.expect(arr.markupFee,\"Markup Fees exists \").to.exist;",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Establishment Name (Transaction Details) exists -> \" + arr.transactionDetails, function () {",
									"                        pm.expect(arr.transactionDetails,\"Transaction Details exists \").to.exist;",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Card Acceptor City exists -> \" + arr.cardAcceptorAddress.city, function () {",
									"                        pm.expect(arr.cardAcceptorAddress.city,\"Card Acceptor City exists \").to.exist;",
									"                    });",
									"                    ",
									"                    /*",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"PSD2 Card Acceptor Country exists -> \" + arr.psd2CardAcceptorAddress.country, function () {",
									"                        pm.expect(arr.psd2CardAcceptorAddress.country,\"PSD2 Card Acceptor Country exists \").to.exist;",
									"                    });",
									"                    */",
									"                });",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            /*",
									"            case \"CUE174F\":",
									"            case \"CUE181F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            */",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e7"
							},
							{
								"key": "HUB-Request-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"type": "text",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"type": "text",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"type": "text",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"type": "text",
								"value": "BDE"
							},
							{
								"key": "Access-Counter",
								"type": "text",
								"value": "3"
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"description": "Obligatorio",
								"key": "Consent-ID",
								"type": "text",
								"value": "{{consentId}}"
							},
							{
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"type": "text",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"type": "text",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"type": "text",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"type": "text",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"type": "text",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"key": "Digest",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "HEADER.ENV",
								"type": "text",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/card-accounts/{{account-id}}/transactions?dateFrom={{transactionStartDate}}&dateTo={{transactionEndDate}}&bookingStatus=booked",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"card-accounts",
								"{{account-id}}",
								"transactions"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{transactionStartDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{transactionEndDate}}"
								},
								{
									"key": "bookingStatus",
									"value": "booked"
								},
								{
									"key": "deltaList",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Consulta+de+movimientos+Cuentas\n\nEste servicio permite obtener las transacciones de una cuenta determinada por su identificador. \n\nComo requisito, se asume que el PSU ha dado su consentimiento para este acceso y ha sido almacenado por el ASPSP."
					},
					"response": []
				}
			],
			"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=17307385\n\n\nLos servicios de AIS (AIS: Account Information Service) sirven para que un TPP acceda a la información de cuentas y tarjetas en la que previamente un PSU otorgó consentimientos mediante [AIS] Gestión de consentimientos.\n\nPara información técnica más detalla, revisar la documentación en Dominio Cuentas/Tarjetas\n\nLos TPP podrán acceder a la información de los productos que está descrito en Alcance de Productos"
		},
		{
			"name": "[PIS] Iniciación de pago desde cuentas",
			"item": [
				{
					"name": "GENERIC_InicioDePago_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ed377d5-7bee-4b96-b64a-b253577a6151",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP INITIATE PAYMENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S07_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"pm.globals.set(\"CRDName\", \"Name-\" + pm.globals.get(\"QA-trackingID\"));",
									"pm.globals.set(\"paymentSubject\", \"Subject-\" + pm.globals.get(\"QA-trackingID\"));",
									"",
									"///////////////////////////////////////////////////////////////////////////////////",
									"pm.globals.set(\"hubTxID\", \"TX-\"+Math.floor((Math.random() * 1000000000) + 1));",
									"",
									"// Limpiamos el valor del paymentID antes de hacer un nuevo pago",
									"pm.globals.unset(\"paymentId\");",
									"",
									"if (pm.variables.get(\"payment-product\") == \"cross-border-credit-transfers\" && pm.variables.get(\"operationType\") == \"TRIX\"){",
									"    pm.globals.set(\"accountType\",\"bban\");",
									"}else {",
									"    pm.globals.set(\"accountType\",\"iban\");",
									"}",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf0ca3f9-860e-4053-8131-81e84422e2aa",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" / \" + jsonDataResponse.tppMessages[0].text + \" -> System has thrown an error \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 400",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF011F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 201",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 201\", function () {",
									"                    pm.response.to.have.status(201);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Request Validations **************************************",
									"",
									"            // Request validations",
									"            //====================",
									"            //var dataBodyRequest = request.data;",
									"            //var jsonDataBodyRequest = JSON.parse(request.data);",
									"            //var requestURL = pm.request.url;",
									"            //var requestHeaders = pm.request.headers;",
									"            //var jsonRequestHeaders = JSON.stringify(pm.request.headers);",
									"            ",
									"            var jsonDataBodyRequest = JSON.parse(request.data);",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** Test Data / Request Validations ***********\", function (){",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"            ",
									"            if (pm.globals.get(\"accountType\") == \"iban\"){ ",
									"                // Validar que existe un IBAN beneficiario en el Body de la petición",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor IBAN is OK -> \" + jsonDataBodyRequest.creditorAccount.iban, function (){",
									"                    pm.expect(jsonDataBodyRequest.creditorAccount.iban,\"Creditor IBAN is OK\").to.eql(pm.variables.get(\"CRDIban\"));",
									"                });",
									"            } else {",
									"                ",
									"                //console.log(\"Test Data: \" + pm.variables.get(\"CRDIban\") + \" typeof: \" + typeof(pm.variables.get(\"CRDIban\")));",
									"",
									"                // Validar que existe un BBAN beneficiario en el Body de la petición",
									"                if (typeof(pm.variables.get(\"CRDIban\")) == 'number'){",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"JSON.parse Creditor BBAN is OK -> \" + JSON.parse(jsonDataBodyRequest.creditorAccount.bban), function (){",
									"                        pm.expect(JSON.parse(jsonDataBodyRequest.creditorAccount.bban),\"Creditor BBAN is OK -> \" + JSON.parse(jsonDataBodyRequest.creditorAccount.bban)).to.eql(pm.variables.get(\"CRDIban\"));",
									"                    });",
									"                    //console.log(\"BBAN parsed: \" + JSON.parse(jsonDataBodyRequest.creditorAccount.bban) + \" typeof: \" + typeof(JSON.parse(jsonDataBodyRequest.creditorAccount.bban)));",
									"                } else {",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor BBAN is OK -> \" + jsonDataBodyRequest.creditorAccount.bban, function (){",
									"                        pm.expect(jsonDataBodyRequest.creditorAccount.bban,\"Creditor BBAN is OK -> \" + jsonDataBodyRequest.creditorAccount.bban).to.eql(pm.variables.get(\"CRDIban\"));",
									"                    });",
									"                    //console.log(\"BBAN: \" + jsonDataBodyRequest.creditorAccount.bban + \" typeof: \" + typeof(jsonDataBodyRequest.creditorAccount.bban));",
									"                }",
									"            }",
									"            ",
									"            // Validar que existe un IBAN ordenate en el Body de la petición",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Debtor IBAN is OK -> \" + jsonDataBodyRequest.debtorAccount.iban, function (){",
									"                pm.expect(jsonDataBodyRequest.debtorAccount.iban,\"Debtor IBAN is OK\").to.eql(pm.variables.get(\"DBTIban\"));",
									"            });",
									"            ",
									"            // Validar que existe una cantidad a transferir en el Body de la petición",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transfer Amount is OK -> \" + jsonDataBodyRequest.instructedAmount.amount, function (){",
									"                pm.expect(jsonDataBodyRequest.instructedAmount.amount.toString(),\"Transfer Amount is OK\").to.eql(pm.variables.get(\"amount\").toString());",
									"            });",
									"            ",
									"            // Validar que existe una moneda a transferir en el Body de la petición",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transfer Currency is OK -> \" + jsonDataBodyRequest.instructedAmount.currency, function (){",
									"                pm.expect(jsonDataBodyRequest.instructedAmount.currency,\"Transfer Currency is OK\").to.eql(pm.variables.get(\"amountCurrency\"));",
									"            });",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** Response Validations ***********\", function (){",
									"                pm.expect(1).to.eql(1);",
									"            });",
									"            ",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF006F\":",
									"              case \"TRF011F\":{",
									"                // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"RJCT\"",
									"                ",
									"                pm.test(\"<\" + epictest + \"> \" + \"<\" + idtest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.operationStatus, function (){",
									"                    pm.expect(jsonDataResponse.paymentId,\"Payment Operation ID exists\").to.exist;",
									"                    pm.expect(jsonDataResponse.operationStatus,\"Payment Operation Status exists\").to.exist;",
									"                });",
									"                    console.log(\"*********** TRF006F/TRF011F\");",
									"                }",
									"                break;",
									"                */",
									"              default:{",
									"                // Validar que existe un Payment Operation Status en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                    pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK \").to.eql(\"RCVD\");",
									"                });",
									"                ",
									"                // Validar que existe un Payment Operation ID en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation ID exists -> \" + jsonDataResponse.paymentId, function (){",
									"                    pm.expect(jsonDataResponse.paymentId,\"Payment Operation ID exists \").to.exist;",
									"                });",
									"",
									"                // Almacenar el Payment Operation ID en una variable global para su re-uso en siguientes peticiones",
									"                ",
									"                pm.globals.set(\"paymentId\", jsonDataResponse.paymentId);",
									"                ",
									"                // Validar que existe un SPA Link en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"SPA Link is OK -> \" + jsonDataResponse._links.scaRedirect.href, function (){",
									"                    pm.expect(jsonDataResponse._links.scaRedirect.href,\"SPA Link is OK \").to.exist;",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"SPA Code is OK -> \" + jsonDataResponse._links.scaRedirect.href.substring(jsonDataResponse._links.scaRedirect.href.indexOf(\"code=\")+5, jsonDataResponse._links.scaRedirect.href.indexOf(\"&paymentId\")), function (){",
									"                    pm.expect(jsonDataResponse._links.scaRedirect.href.substring(jsonDataResponse._links.scaRedirect.href.indexOf(\"code=\")+5, jsonDataResponse._links.scaRedirect.href.indexOf(\"&paymentId\")),\"SPA Code is OK \").to.exist;",
									"                });",
									"                ",
									"                // Almacenar el SPA Code en una variable global para su re-uso en siguientes peticiones",
									"                pm.globals.set(\"spaCode\", jsonDataResponse._links.scaRedirect.href.substring(jsonDataResponse._links.scaRedirect.href.indexOf(\"code=\")+5, jsonDataResponse._links.scaRedirect.href.indexOf(\"&paymentId\")));",
									"                ",
									"                // Validar que existe un Self Link en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Self Link is OK -> \" + jsonDataResponse._links.self.href, function (){",
									"                    pm.expect(jsonDataResponse._links.self.href,\"Self Link is OK \").to.exist;",
									"                });",
									"                ",
									"                // Validar que existe un Status Link en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status Link is OK -> \" + jsonDataResponse._links.status.href, function (){",
									"                    pm.expect(jsonDataResponse._links.status.href,\"Status Link is OK \").to.exist;",
									"                });",
									"              }",
									"            }            ",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"TRF011F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Obligatorio",
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "HUB-Transaction-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "HUB-Request-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"type": "text",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"type": "text",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"type": "text",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"type": "text",
								"value": "BDE"
							},
							{
								"key": "RiskScoring",
								"type": "text",
								"value": ""
							},
							{
								"description": "Condicional. No soportado en esta versión",
								"key": "PSU-ID",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"description": "Condicional. No soportado en esta versión",
								"key": "PSU-ID-Type",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"description": "Condicional. No soportado en esta versión",
								"key": "PSU-Corporate-ID",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"description": "Condicional. No soportado en esta versión",
								"key": "PSU-Corporate-ID-Type",
								"type": "text",
								"value": "",
								"disabled": true
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"key": "Consent-ID",
								"type": "text",
								"value": "{{consentId}}"
							},
							{
								"description": "Obligatorio",
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"type": "text",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"type": "text",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"type": "text",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"type": "text",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"type": "text",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"key": "TPP-Redirect-Preferred",
								"type": "text",
								"value": ""
							},
							{
								"description": "Condicional",
								"key": "TPP-Redirect-URI",
								"type": "text",
								"value": "{{redirectUri}}?OK=true"
							},
							{
								"key": "TPP-Nok-Redirect-URI",
								"type": "text",
								"value": "{{redirectUri}}?OK=false"
							},
							{
								"key": "TPP-Explicit-Authorisation-Preferred",
								"type": "text",
								"value": ""
							},
							{
								"description": "Obligatorio",
								"key": "Digest",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"type": "text",
								"value": "TODO"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json,text/xml"
							},
							{
								"key": "Accept-Encoding",
								"type": "text",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "es-ES,es;q=0.9"
							},
							{
								"description": "Solo necesario en INT/UAT",
								"key": "HEADER.ENV",
								"type": "text",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"instructedAmount\": {\r\n        \"currency\": \"{{amountCurrency}}\",\r\n        \"amount\": \"{{amount}}\"\r\n    },\r\n    \"debtorAccount\": {\r\n        \"iban\": \"{{DBTIban}}\",\r\n        \"currency\": \"{{DBTCurrency}}\"\r\n    },\r\n    \"creditorName\": \"{{CRDName}}\",\r\n    \"creditorAgent\": \"{{CRDAgent}}\",\r\n    \"creditorAccount\": {\r\n        \"{{accountType}}\": \"{{CRDIban}}\",\r\n        \"currency\": \"{{CRDCurrency}}\"\r\n    },\r\n    \"creditorAddress\": {\r\n        \"street\": \"{{CRDAddressStreet}}\",\r\n        \"buildingNumber\": \"{{CRDAddressBuildingNumber}}\",\r\n        \"city\": \"{{CRDAddressCity}}\",\r\n        \"postalCode\": \"{{CRDAddressPostalCode}}\",\r\n        \"country\": \"{{CRDAddressCountry}}\"\r\n    },\r\n    \"remittanceInformationUnstructured\": \"{{paymentSubject}}\",\r\n    \"startDate\":\"{{POStartDate}}\",\r\n    \"endDate\":\"{{POEndDate}}\",\r\n    \"frequency\": \"{{frequency}}\",\r\n    \"requestedExecutionDate\": \"{{FNTDate}}\",\r\n    \"dayOfExecution\": \"{{dayOfExecution}}\"\r\n}"
						},
						"url": {
							"raw": "{{provider}}/v1/{{payment-service}}/{{payment-product}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"{{payment-service}}",
								"{{payment-product}}"
							]
						},
						"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=17307387\n\nEl servicio de iniciación de pago permite que un TPP pueda iniciar un pago en nombre del PSU.\n\nPara la ejecución de cualquier iniciación de pagos solicitada por el TPP, la petición debe ser firmada con su correspondiente proceso de [SCA] Firma de operaciones. Se ofrece al TPP la opción de que el PSU realice la firma a través de dos modos: Redirect o Desacoplado.\n\nSe debe permitir la iniciación de pagos que requieren firmar conjuntas y se debe poder firmar más de una operación en el proceso de firma en cualquiera de los modos soportados\n\nLas peticiones de iniciación de pagos asumen que la identidad del PSU es conocida gracias al paso de [Login] Autenticación OAuth (PreStep)\n\n \n\nPara información técnica más detalla, revisar la documentación en Dominio Transferencias"
					},
					"response": []
				},
				{
					"name": "INTERNAL_spa - internal payment status detail_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec94751c-6b23-4d67-b915-ed326ccfce7a",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"CUE181F\":{ //Esperamos fallo porque la cuenta es empresa y la procedencia es particular",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epictest + \"> \" + \"<\" + idtest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** CUE181F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"PaymentId exists -> \" + jsonDataResponse[0].paymentId, function () {",
									"                    pm.expect(jsonDataResponse[0].paymentId,\"PaymentId exists \").to.exist;",
									"            });",
									"                ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"InstructedAmount is OK -> \" + jsonDataResponse[0].instructedAmount.amount + \" \" + jsonDataResponse[0].instructedAmount.currency, function () {",
									"                    pm.expect(jsonDataResponse[0].instructedAmount.amount,\"InstructedAmount Amount is OK -> \" + jsonDataResponse[0].instructedAmount.amount).to.be.eql(pm.variables.get(\"amount\"));",
									"                    pm.expect(jsonDataResponse[0].instructedAmount.currency,\"InstructedAmount Currency is OK -> \" + jsonDataResponse[0].instructedAmount.currency).to.be.eql(pm.variables.get(\"amountCurrency\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Debtor Account is OK -> \" + jsonDataResponse[0].debtorAccount.iban, function () {",
									"                    pm.expect(jsonDataResponse[0].debtorAccount.iban,\"Debtor Account IBAN is OK -> \" + jsonDataResponse[0].debtorAccount.iban).to.be.eql(pm.variables.get(\"DBTIban\"));",
									"                    pm.expect(jsonDataResponse[0].debtorAccount.currency,\"Debtor Account Currency is OK -> \" + jsonDataResponse[0].debtorAccount.currency).to.be.eql(pm.variables.get(\"DBTCurrency\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Name is OK -> \" + jsonDataResponse[0].creditorName, function () {",
									"                    pm.expect(jsonDataResponse[0].creditorName,\"Creditor Name is OK \").to.be.eql(pm.variables.get(\"CRDName\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Name is OK -> \" + jsonDataResponse[0].creditorAgent, function () {",
									"                    pm.expect(jsonDataResponse[0].creditorAgent,\"Creditor Name is OK \").to.be.eql(pm.variables.get(\"CRDAgent\"));",
									"            });",
									"            ",
									"            if (pm.globals.get(\"accountType\") == \"iban\"){",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + jsonDataResponse[0].creditorAccount.iban, function () {",
									"                        pm.expect(jsonDataResponse[0].creditorAccount.iban,\"Creditor Account IBAN is OK -> \" + jsonDataResponse[0].creditorAccount.iban).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                        pm.expect(jsonDataResponse[0].creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse[0].creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                });",
									"            } else {",
									"                if (typeof(pm.variables.get(\"CRDIban\")) == 'number'){",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + JSON.parse(jsonDataResponse[0].creditorAccount.bban), function () {",
									"                        pm.expect(JSON.parse(jsonDataResponse[0].creditorAccount.bban),\"Creditor Account IBAN is OK -> \" + JSON.parse(jsonDataResponse[0].creditorAccount.bban)).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                        pm.expect(jsonDataResponse[0].creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse[0].creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                    });",
									"                } else {",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + jsonDataResponse[0].creditorAccount.bban, function () {",
									"                        pm.expect(jsonDataResponse[0].creditorAccount.bban,\"Creditor Account IBAN is OK -> \" + jsonDataResponse[0].creditorAccount.bban).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                        pm.expect(jsonDataResponse[0].creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse[0].creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                    });",
									"                }",
									"            }",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Address is OK -> \" + jsonDataResponse[0].creditorAddress.street + \", \" + jsonDataResponse[0].creditorAddress.buildingNumber + \". \" + jsonDataResponse[0].creditorAddress.city + \", \" + jsonDataResponse[0].creditorAddress.postalCode + \". \" + jsonDataResponse[0].creditorAddress.country , function () {",
									"                    pm.expect(jsonDataResponse[0].creditorAddress.street,\"Creditor Address is OK -> \" + jsonDataResponse[0].creditorAddress.street).to.be.eql(pm.variables.get(\"CRDAddressStreet\"));",
									"                    pm.expect(parseInt(jsonDataResponse[0].creditorAddress.buildingNumber),\"Creditor Address Building Number is OK -> \" + jsonDataResponse[0].creditorAddress.buildingNumber).to.be.eql(pm.variables.get(\"CRDAddressBuildingNumber\"));",
									"                    pm.expect(jsonDataResponse[0].creditorAddress.city,\"Creditor Address City is OK -> \" + jsonDataResponse[0].creditorAddress.city).to.be.eql(pm.variables.get(\"CRDAddressCity\"));",
									"                    pm.expect(parseInt(jsonDataResponse[0].creditorAddress.postalCode),\"Creditor Address Postal Code is OK -> \" + jsonDataResponse[0].creditorAddress.postalCode).to.be.eql(pm.variables.get(\"CRDAddressPostalCode\"));",
									"                    pm.expect(jsonDataResponse[0].creditorAddress.country,\"Creditor Address Country is OK -> \" + jsonDataResponse[0].creditorAddress.country).to.be.eql(pm.variables.get(\"CRDAddressCountry\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Subjetc is OK -> \" + jsonDataResponse[0].remittanceInformationUnstructured, function () {",
									"                    pm.expect(jsonDataResponse[0].remittanceInformationUnstructured,\"Payment Subjetc is OK \").to.be.eql(pm.variables.get(\"paymentSubject\"));",
									"            });",
									"            /*",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transaction Fees exists -> \" + jsonDataResponse[0].transactionFees.amount + \" \" + jsonDataResponse[0].transactionFees.currency, function () {",
									"                    pm.expect(jsonDataResponse[0].creditorAccount.amount,\"Transaction Fees Amount exist -> \" + jsonDataResponse[0].transactionFees.amount).to.exist;",
									"                    pm.expect(jsonDataResponse[0].creditorAccount.currency,\"Transaction Fees Currency exists -> \" + jsonDataResponse[0].transactionFees.currency).to.exist;",
									"            });",
									"            */",
									"            switch(idTest) {",
									"                ",
									"                default:{",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSC\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists and is OK -> \" + jsonDataResponse[0].transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse[0].transactionStatus,\"Payment Operation Status exists \").to.exist;",
									"                        pm.expect(jsonDataResponse[0].transactionStatus,\"Payment Operation Status is OK -> \" + jsonDataResponse[0].transactionStatus).to.eql(\"RCVD\");",
									"                        //pm.expect(jsonDataResponse[0].transactionStatus,\"Payment Operation Status is OK \").to.eql(pm.variables.get(\"OperationType\"));",
									"                    });",
									"                     //console.log(\"*********** DEFAULT\");    ",
									"                }",
									"            }            ",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"TRF011F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d4804f7-bb24-4046-b644-7cf375eac1ec",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA INTERNAL PAYMENT STATUS DETAIL \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S08_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "HEADER.SERVICE_PROCEDENCE",
								"value": "{{procedence}}"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}"
							},
							{
								"key": "TPP-Transaction-ID",
								"value": "{{hubTxID}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "{{tppRole}}"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json,text/xml"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": ""
							},
							{
								"key": "TPP-HubTransaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "Signature",
								"value": ""
							},
							{
								"key": "TPP-Certificate",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/payments/{{payment-product}}/{{paymentId}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"payments",
								"{{payment-product}}",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL_spa - associate payment_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab1099d3-34ff-4e21-a490-9d8ce61158e7",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            switch(idTest) {",
									"                case \"TRF011F\": { //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                    });",
									"                }",
									"                break;",
									"                case \"TRF018F\": { //Esperamos fallo porque la cuenta ordenante es baja",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                        pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"12264\");",
									"                    });",
									"                    ",
									"                    // Verificar que el Status Code es 500",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"EXPECTED ERROR Status code is -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                }",
									"                break;",
									"                case \"TRP015F\": // Cuenta con saldo negativo",
									"                case \"TRF024F\":",
									"                case \"TRF074F\": { //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                        pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"12265\");",
									"                    });",
									"                    ",
									"                    // Verificar que el Status Code es 500",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"EXPECTED ERROR Status code is -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                }",
									"                break;",
									"                case \"TRF073F\": { //Esperamos fallo porque la cuenta tiene",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                        pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"23257\");",
									"                    });",
									"                    ",
									"                    // Verificar que el Status Code es 500",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"EXPECTED ERROR Status code is -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                }",
									"                break;",
									"                default: {",
									"                    // Verificar que el Status Code es 401",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                        pm.expect(1).to.eql(2);",
									"                    });",
									"                }",
									"            }",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              //case \"TRF006F\": //Esperamos fallo porque el estado es RJCT",
									"              case \"TRF011F\": //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"              case \"TRF024F\": //Esperamos fallo porque la cuenta ordenante tiene firma digital por SMS - VTC2",
									"              case \"TRP015F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF006F/TRF011F/TRF024F/TRP015F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Operation Type is OK -> \" + jsonDataResponse.operationType, function (){",
									"                pm.expect(jsonDataResponse.operationType,\"Operation Type is OK\").to.eql(pm.variables.get(\"operationType\"));",
									"            });",
									"        ",
									"            switch(idTest) {",
									"              //case \"TRF006F\":",
									"              case \"TRF011F\":{",
									"                // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"RJCT\"",
									"                /*",
									"                pm.test(\"<\" + epictest + \"> \" + \"<\" + idtest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                    pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                    pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"RJCT\");",
									"                    });",
									"                */",
									"                    console.log(\"*********** TRF006F/TRF011F\");",
									"                }",
									"                break;",
									"                ",
									"              default:{",
									"                // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACWC\"",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                    pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACWC\");",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"InstructedAmount is OK -> \" + jsonDataResponse.instructedAmount.amount + \" \" + jsonDataResponse.instructedAmount.currency, function () {",
									"                        pm.expect(jsonDataResponse.instructedAmount.amount,\"InstructedAmount Amount is OK -> \" + jsonDataResponse.instructedAmount.amount).to.be.eql(pm.variables.get(\"amount\"));",
									"                        pm.expect(jsonDataResponse.instructedAmount.currency,\"InstructedAmount Currency is OK -> \" + jsonDataResponse.instructedAmount.currency).to.be.eql(pm.variables.get(\"amountCurrency\"));",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Debtor Account is OK -> \" + jsonDataResponse.debtorAccount.iban, function () {",
									"                        pm.expect(jsonDataResponse.debtorAccount.iban,\"Debtor Account IBAN is OK -> \" + jsonDataResponse.debtorAccount.iban).to.be.eql(pm.variables.get(\"DBTIban\"));",
									"                        pm.expect(jsonDataResponse.debtorAccount.currency,\"Debtor Account Currency is OK -> \" + jsonDataResponse.debtorAccount.currency).to.be.eql(pm.variables.get(\"DBTCurrency\"));",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Name is OK -> \" + jsonDataResponse.creditorName, function () {",
									"                        pm.expect(jsonDataResponse.creditorName,\"Creditor Name is OK \").to.be.eql(pm.variables.get(\"CRDName\"));",
									"                });",
									"                ",
									"                switch(pm.variables.get(\"operationType\")) {",
									"                    case \"TRAF\": // Transferencias Nacionales",
									"                    case \"TSAL\": // Traspasos",
									"                    case \"TROX\": // Transferencias Nacionales en divisas",
									"                    case \"TRPR\": { // Transferencias Futuras y Periodicas Nacionales",
									"                        console.log(\"Es una Transferencia Nacional o un  Traspaso\");",
									"                    }",
									"                    break;",
									"                    ",
									"                    default: {",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Agent is OK -> \" + jsonDataResponse.creditorAgent, function () {",
									"                                pm.expect(jsonDataResponse.creditorAgent,\"Creditor Agent is OK \").to.be.eql(pm.variables.get(\"CRDAgent\"));",
									"                        });",
									"                    }",
									"                }",
									"                ",
									"                if (pm.globals.get(\"accountType\") == \"iban\"){",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + jsonDataResponse.creditorAccount.iban, function () {",
									"                            pm.expect(jsonDataResponse.creditorAccount.iban,\"Creditor Account IBAN is OK -> \" + jsonDataResponse.creditorAccount.iban).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                            pm.expect(jsonDataResponse.creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse.creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                    });",
									"                } else {",
									"                    if (typeof(pm.variables.get(\"CRDIban\")) == 'number'){",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + JSON.parse(jsonDataResponse.creditorAccount.bban), function () {",
									"                            pm.expect(JSON.parse(jsonDataResponse.creditorAccount.bban),\"Creditor Account BBAN is OK -> \" + JSON.parse(jsonDataResponse.creditorAccount.bban)).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                            pm.expect(jsonDataResponse.creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse.creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                        });",
									"                    } else{",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + jsonDataResponse.creditorAccount.bban, function () {",
									"                            pm.expect(jsonDataResponse.creditorAccount.bban,\"Creditor Account BBAN is OK -> \" + jsonDataResponse.creditorAccount.bban).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                            pm.expect(jsonDataResponse.creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse.creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                        });",
									"                    }",
									"                }",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Address is OK -> \" + jsonDataResponse.creditorAddress.street + \", \" + jsonDataResponse.creditorAddress.buildingNumber + \". \" + jsonDataResponse.creditorAddress.city + \", \" + jsonDataResponse.creditorAddress.postalcode + \". \" + jsonDataResponse.creditorAddress.country , function () {",
									"                        pm.expect(jsonDataResponse.creditorAddress.street,\"Creditor Address is OK -> \" + jsonDataResponse.creditorAddress.street).to.be.eql(pm.variables.get(\"CRDAddressStreet\"));",
									"                        pm.expect(parseInt(jsonDataResponse.creditorAddress.buildingNumber),\"Creditor Address Building Number is OK -> \" + jsonDataResponse.creditorAddress.buildingNumber).to.be.eql(pm.variables.get(\"CRDAddressBuildingNumber\"));",
									"                        pm.expect(jsonDataResponse.creditorAddress.city,\"Creditor Address City is OK -> \" + jsonDataResponse.creditorAddress.city).to.be.eql(pm.variables.get(\"CRDAddressCity\"));",
									"                        pm.expect(parseInt(jsonDataResponse.creditorAddress.postalCode),\"Creditor Address Postal Code is OK -> \" + jsonDataResponse.creditorAddress.postalCode).to.be.eql(pm.variables.get(\"CRDAddressPostalCode\"));",
									"                        pm.expect(jsonDataResponse.creditorAddress.country,\"Creditor Address Country is OK -> \" + jsonDataResponse.creditorAddress.country).to.be.eql(pm.variables.get(\"CRDAddressCountry\"));",
									"                });",
									"                ",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Subjetc is OK -> \" + jsonDataResponse.remittanceInformationUnstructured, function () {",
									"                        pm.expect(jsonDataResponse.remittanceInformationUnstructured,\"Payment Subjetc is OK \").to.be.eql(pm.variables.get(\"paymentSubject\"));",
									"                });",
									"                ",
									"                /*",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transaction Fees exists -> \" + jsonDataResponse.transactionFees.amount + \" \" + jsonDataResponse.transactionFees.currency, function () {",
									"                        pm.expect(jsonDataResponse.transactionFees.amount,\"Transaction Fees Amount exist -> \" + jsonDataResponse.transactionFees.amount).to.exist;",
									"                        pm.expect(jsonDataResponse.transactionFees.currency,\"Transaction Fees Currency exists -> \" + jsonDataResponse.transactionFees.currency).to.exist;",
									"                });",
									"                */",
									"                //console.log(\"*********** DEFAULT\");    ",
									"              }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            case \"TRP015F\":",
									"            case \"TRF015F\":",
									"            case \"TRF011F\":",
									"            case \"TRF006F\":",
									"            case \"TRF024F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a69498e-a9af-4602-84af-94dbed4ce1a6",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA ASSOCIATE PAYMENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S09_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "HEADER.SERVICE_PROCEDENCE",
								"value": "{{procedence}}"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}"
							},
							{
								"key": "TPP-Transaction-ID",
								"value": "{{hubTxID}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "{{tppRole}}"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json,text/xml"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": ""
							},
							{
								"key": "TPP-HubTransaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "Signature",
								"value": ""
							},
							{
								"key": "TPP-Certificate",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/payments/{{payment-product}}/{{paymentId}}/associate",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"payments",
								"{{payment-product}}",
								"{{paymentId}}",
								"associate"
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL_spa - prepare payment_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cedc451-6c3c-4b8f-8203-538355e644bf",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            pm.globals.set(\"otpType\",\"unknown\");",
									"            ",
									"            switch(idTest) {",
									"                ",
									"                case \"TRP015F\": // Cuenta con saldo negativo",
									"                case \"TRF024F\":",
									"                case \"TRF074F\":",
									"                case \"TRF018F\":",
									"                case \"TRF073F\":{",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                        pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"BSAPI00001\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"                case \"TRF083F\": // Bloqueada por seguridad",
									"                case \"TRF093F\": // Bloqueada por seguridad",
									"                case \"TRP019F\": // Diferente titular",
									"                case \"TRP016F\": // Cuenta Sin Fondos",
									"                case \"TRF019F\":{",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                        pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"56408\");",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                }",
									"                break;",
									"                ",
									"                case \"TRF011F\": { //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an EXPECTED error \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                    });",
									"                    postman.setNextRequest(null);",
									"                }",
									"                console.log(\"********************** ERRORES CONTROLADOS EN PAGOS: \");",
									"                break;",
									"                ",
									"                default: {",
									"                    console.log(\"********************** ERRORES EN PAGOS: \");",
									"                    // Verificar que el Status Code es 401",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                        pm.response.to.have.status(500);",
									"                    });",
									"                    ",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                        pm.expect(1).to.eql(2);",
									"                    });",
									"                }",
									"            }",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              //case \"TRF006F\": //Esperamos fallo porque la cuenta ordenante estado RJCT",
									"              case \"TRF024F\": //Esperamos fallo porque tiene firma VTPC2",
									"              ",
									"              //case \"TRP016F\": //Esperamos fallo porque la cuenta ordenante no tiene fondos",
									"              case \"TRP015F\": //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"              case \"TRF011F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** TRP016F/TRP015F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"            // Validar que existe un Payment OTP Coordinate1 en el Body de la respuesta",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment OTP Coordinate exists -> \" + jsonDataResponse.coordinate1, function (){",
									"                pm.expect(jsonDataResponse.coordinate1,\"Payment OTP Coordinate exists \").to.exist;",
									"            });",
									"            ",
									"            // Validar que existe un Payment OTP Type en el Body de la respuesta",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment OTP Type exists -> \" + jsonDataResponse.otpType, function (){",
									"                pm.expect(jsonDataResponse.otpType,\"Payment OTP Type exists \").to.exist;",
									"            });",
									"            ",
									"            if (jsonDataResponse.otpType === undefined){",
									"                pm.globals.set(\"otpType\",\"unknown\");",
									"            } else {",
									"                pm.globals.set(\"otpType\",jsonDataResponse.otpType);",
									"                pm.globals.set(\"vtpc2Array\",jsonDataResponse.codesCard);",
									"                console.log(\"array tarjeta GLOBAL:::::::\",pm.globals.get(\"vtpc2Array\"));",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            case \"TRP015F\":",
									"            case \"TRF011F\":",
									"            case \"TRF006F\":",
									"            case \"TRF024F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9db7c1f-fd6f-4d48-832a-48e9a99cf435",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA PREPARE PAYMENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S10_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "HEADER.SERVICE_PROCEDENCE",
								"value": "{{procedence}}"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}"
							},
							{
								"key": "TPP-Transaction-ID",
								"value": "{{hubTxID}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "{{tppRole}}"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json,text/xml"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": ""
							},
							{
								"key": "TPP-HubTransaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "Signature",
								"value": ""
							},
							{
								"key": "TPP-Certificate",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/payments/{{payment-product}}/{{paymentId}}/prepare",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"payments",
								"{{payment-product}}",
								"{{paymentId}}",
								"prepare"
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL _psu - get otp value_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c667dc12-ed42-4747-8391-4ed537152724",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"    ",
									"        if ((jsonDataResponse.tppMessages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN CUENTAS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.tppMessages[0].category + \" / \" + jsonDataResponse.tppMessages[0].code + \" -> TPP has thrown an error for IBAN \" + pm.variables.get(\"iban\"), function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 401\", function () {",
									"                pm.response.to.have.status(401);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(pm.globals.get(\"otpType\")) {",
									"              ",
									"              case \"unknown\":{",
									"                switch(idTest) {",
									"                    case \"TRF018F\":{",
									"                        // Verificar que el Status Code es 200",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                            pm.response.to.have.status(200);",
									"                        });",
									"                        ",
									"                    }",
									"                    break;",
									"                    default: {",
									"                        // Verificar que el Status Code es 500",
									"                        pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                            pm.response.to.have.status(500);",
									"                        });",
									"                    }",
									"                }",
									"              }",
									"              break;",
									"              case \"TPC\":{ //",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** otpType = TPC o unknown\");",
									"              break;",
									"              ",
									"              default:{ // FD y FDSMS",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            pm.globals.set(\"otp_value\", jsonDataResponse.replace('\"','').replace('\"',''));",
									"            //console.log(\"OTP VALUE GLOBALS = \" +  pm.globals.get(\"otp_value\"));",
									"            //console.log(\"OTP VALUE = \" +  jsonDataResponse.replace('\"','').replace('\"',''));",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Has returned an OTP value -> \" + jsonDataResponse, function () {",
									"                pm.expect(pm.globals.get(\"otp_value\"),pm.globals.get(\"otp_value\") + \" -> OTP exists\").to.exist;",
									"            });",
									"            switch(pm.globals.get(\"otpType\")){",
									"              ",
									"              case \"FDSMS\": {",
									"                const cordenadas=  pm.globals.get(\"vtpc2Array\");",
									"                const cord=parseInt(pm.globals.get(\"otp_value\"));",
									"                const tarjetaCordenadas=pm.globals.get(\"otp_value\")+cordenadas[cord-1];",
									"                pm.globals.set(\"otp_value\",tarjetaCordenadas);",
									"                console.log(\"CASO FDSMS --------///////*******\",pm.globals.get(\"otp_value\") );",
									"              }",
									"              break;",
									"              case \"unknown\": {",
									"                  switch (pm.globals.get(\"otp_value\")){",
									"                    case \"01\":{ ",
									"                      pm.globals.set(\"otp_value\",\"012442\");",
									"                    }",
									"                      break;",
									"                    case \"02\": {",
									"                      pm.globals.set(\"otp_value\",\"025775\");",
									"                    }",
									"                      break;",
									"                    case \"03\": {",
									"                      pm.globals.set(\"otp_value\",\"031040\");",
									"                    }",
									"                      break;",
									"                    case \"04\": {",
									"                      pm.globals.set(\"otp_value\",\"047350\");",
									"                    }",
									"                      break;",
									"                    case \"05\": {",
									"                      pm.globals.set(\"otp_value\",\"050861\");",
									"                    }",
									"                      break;",
									"                    case \"06\": {",
									"                      pm.globals.set(\"otp_value\",\"067938\");",
									"                    }",
									"                      break;",
									"                    case \"07\": {",
									"                      pm.globals.set(\"otp_value\",\"075645\");",
									"                    }",
									"                      break;",
									"                    case \"08\": {",
									"                      pm.globals.set(\"otp_value\",\"084461\");",
									"                    }",
									"                      break;",
									"                    case \"09\": {",
									"                      pm.globals.set(\"otp_value\",\"090512\");",
									"                    }",
									"                      break;",
									"                    case \"10\": {",
									"                      pm.globals.set(\"otp_value\",\"109070\");",
									"                    }",
									"                      break;",
									"                    case \"11\": {",
									"                      pm.globals.set(\"otp_value\",\"110173\");",
									"                    }",
									"                      break;",
									"                    case \"12\": {",
									"                      pm.globals.set(\"otp_value\",\"120088\");",
									"                    }",
									"                      break;  ",
									"                    case \"13\": {",
									"                      pm.globals.set(\"otp_value\",\"132515\");",
									"                    }",
									"                      break;  ",
									"                    case \"14\": {",
									"                      pm.globals.set(\"otp_value\",\"148216\");",
									"                    }",
									"                      break;",
									"                    case \"15\": {",
									"                      pm.globals.set(\"otp_value\",\"159692\");",
									"                    }",
									"                      break;",
									"                    case \"16\": {",
									"                      pm.globals.set(\"otp_value\",\"166980\");",
									"                    }",
									"                      break;",
									"                    case \"17\": {",
									"                      pm.globals.set(\"otp_value\",\"171578\");",
									"                    }",
									"                      break;",
									"                    case \"18\": {",
									"                      pm.globals.set(\"otp_value\",\"186110\");",
									"                    }",
									"                      break;",
									"                    case \"19\": {",
									"                      pm.globals.set(\"otp_value\",\"190912\");",
									"                    }",
									"                      break;",
									"                    case \"20\": {",
									"                      pm.globals.set(\"otp_value\",\"209784\");",
									"                    }",
									"                      break;",
									"                    case \"21\": {",
									"                      pm.globals.set(\"otp_value\",\"211204\");",
									"                    }",
									"                      break;",
									"                    case \"22\": {",
									"                      pm.globals.set(\"otp_value\",\"225277\");",
									"                    }",
									"                      break;",
									"                    case \"23\": {",
									"                      pm.globals.set(\"otp_value\",\"232798\");",
									"                    }",
									"                      break;",
									"                    case \"24\": {",
									"                      pm.globals.set(\"otp_value\",\"247460\");",
									"                    }",
									"                      break;",
									"                    case \"25\": {",
									"                      pm.globals.set(\"otp_value\",\"253263\");",
									"                    }",
									"                      break;",
									"                    case \"26\": {",
									"                      pm.globals.set(\"otp_value\",\"265606\");",
									"                    }",
									"                      break;",
									"                    case \"27\": {",
									"                      pm.globals.set(\"otp_value\",\"273756\");",
									"                    }",
									"                      break;",
									"                    case \"28\": {",
									"                      pm.globals.set(\"otp_value\",\"282270\");",
									"                    }",
									"                      break;",
									"                    case \"29\": {",
									"                      pm.globals.set(\"otp_value\",\"295198\");",
									"                    }",
									"                      break;",
									"                    case \"30\": {",
									"                      pm.globals.set(\"otp_value\",\"301893\");",
									"                    }",
									"                      break;",
									"                    case \"31\": {",
									"                      pm.globals.set(\"otp_value\",\"310806\");",
									"                    }",
									"                      break;",
									"                    case \"32\": {",
									"                      pm.globals.set(\"otp_value\",\"325563\");",
									"                    }",
									"                      break;  ",
									"                    case \"33\": {",
									"                      pm.globals.set(\"otp_value\",\"333530\");",
									"                    }",
									"                      break;  ",
									"                    case \"34\": {",
									"                      pm.globals.set(\"otp_value\",\"341907\");",
									"                    }",
									"                      break;",
									"                    case \"35\": {",
									"                      pm.globals.set(\"otp_value\",\"354200\");",
									"                    }",
									"                      break;",
									"                    case \"36\": {",
									"                      pm.globals.set(\"otp_value\",\"363038\");",
									"                    }",
									"                      break;",
									"                    case \"37\": {",
									"                      pm.globals.set(\"otp_value\",\"372289\");",
									"                    }",
									"                      break;",
									"                    case \"38\": {",
									"                      pm.globals.set(\"otp_value\",\"383862\");",
									"                    }",
									"                      break;",
									"                    case \"39\": {",
									"                      pm.globals.set(\"otp_value\",\"398584\");",
									"                    }",
									"                      break;",
									"                    case \"40\": {",
									"                      pm.globals.set(\"otp_value\",\"407069\");",
									"                    }",
									"                      break;",
									"                    case \"41\": {",
									"                      pm.globals.set(\"otp_value\",\"414996\");",
									"                    }",
									"                      break;",
									"                    case \"42\": {",
									"                      pm.globals.set(\"otp_value\",\"423678\");",
									"                    }",
									"                      break;",
									"                    case \"43\": {",
									"                      pm.globals.set(\"otp_value\",\"437276\");",
									"                    }",
									"                      break;",
									"                    case \"44\": {",
									"                      pm.globals.set(\"otp_value\",\"444590\");",
									"                    }",
									"                      break;",
									"                    case \"45\": {",
									"                      pm.globals.set(\"otp_value\",\"451641\");",
									"                    }",
									"                      break;",
									"                    case \"46\": {",
									"                      pm.globals.set(\"otp_value\",\"465694\");",
									"                    }",
									"                      break;",
									"                    case \"47\": {",
									"                      pm.globals.set(\"otp_value\",\"475041\");",
									"                    }",
									"                      break;",
									"                    case \"48\": {",
									"                      pm.globals.set(\"otp_value\",\"482740\");",
									"                    }",
									"                      break;",
									"                    case \"49\": {",
									"                      pm.globals.set(\"otp_value\",\"492566\");",
									"                    }",
									"                      break;",
									"                    case \"50\": {",
									"                      pm.globals.set(\"otp_value\",\"501111\");",
									"                    }",
									"                      break;",
									"                    case \"51\": {",
									"                      pm.globals.set(\"otp_value\",\"515116\");",
									"                    }",
									"                      break;",
									"                    case \"52\": {",
									"                      pm.globals.set(\"otp_value\",\"525139\");",
									"                    }",
									"                      break;  ",
									"                    case \"53\": {",
									"                      pm.globals.set(\"otp_value\",\"533427\");",
									"                    }",
									"                      break;  ",
									"                    case \"54\": {",
									"                      pm.globals.set(\"otp_value\",\"540838\");",
									"                    }",
									"                      break;",
									"                    case \"55\": {",
									"                      pm.globals.set(\"otp_value\",\"550586\");",
									"                    }",
									"                      break;",
									"                    case \"56\": {",
									"                      pm.globals.set(\"otp_value\",\"562490\");",
									"                    }",
									"                      break;",
									"                    case \"57\": {",
									"                      pm.globals.set(\"otp_value\",\"578290\");",
									"                    }",
									"                      break;",
									"                    case \"58\": {",
									"                      pm.globals.set(\"otp_value\",\"583692\");",
									"                    }",
									"                      break;",
									"                    case \"59\": {",
									"                      pm.globals.set(\"otp_value\",\"593117\");",
									"                    }",
									"                      break;",
									"                    case \"60\": {",
									"                      pm.globals.set(\"otp_value\",\"608671\");",
									"                    }",
									"                      break;",
									"                    case \"61\": {",
									"                      pm.globals.set(\"otp_value\",\"611006\");",
									"                    }",
									"                      break;",
									"                    case \"62\": {",
									"                      pm.globals.set(\"otp_value\",\"622610\");",
									"                    }",
									"                      break;",
									"                    case \"63\": {",
									"                      pm.globals.set(\"otp_value\",\"638995\");",
									"                    }",
									"                      break;",
									"                    case \"64\": {",
									"                      pm.globals.set(\"otp_value\",\"644126\");",
									"                    }",
									"                      break;",
									"                    case \"65\": {",
									"                      pm.globals.set(\"otp_value\",\"652228\");",
									"                    }",
									"                      break;",
									"                    case \"66\": {",
									"                      pm.globals.set(\"otp_value\",\"664720\");",
									"                    }",
									"                      break;",
									"                    case \"67\": {",
									"                      pm.globals.set(\"otp_value\",\"673420\");",
									"                    }",
									"                      break;",
									"                    case \"68\": {",
									"                      pm.globals.set(\"otp_value\",\"682472\");",
									"                    }",
									"                      break;",
									"                    case \"69\": {",
									"                      pm.globals.set(\"otp_value\",\"691176\");",
									"                    }",
									"                      break;",
									"                    case \"70\": {",
									"                      pm.globals.set(\"otp_value\",\"703381\");",
									"                    }",
									"                      break;",
									"                    case \"71\": {",
									"                      pm.globals.set(\"otp_value\",\"710922\");",
									"                    }",
									"                      break;",
									"                    case \"72\": {",
									"                      pm.globals.set(\"otp_value\",\"721769\");",
									"                    }",
									"                      break;  ",
									"                    case \"73\": {",
									"                      pm.globals.set(\"otp_value\",\"732656\");",
									"                    }",
									"                      break;  ",
									"                    case \"74\": {",
									"                      pm.globals.set(\"otp_value\",\"740138\");",
									"                    }",
									"                      break;",
									"                    case \"75\": {",
									"                      pm.globals.set(\"otp_value\",\"758012\");",
									"                    }",
									"                      break;",
									"                    case \"76\": {",
									"                      pm.globals.set(\"otp_value\",\"763263\");",
									"                    }",
									"                      break;",
									"                    case \"77\": {",
									"                      pm.globals.set(\"otp_value\",\"770067\");",
									"                    }",
									"                      break;",
									"                    case \"78\": {",
									"                      pm.globals.set(\"otp_value\",\"780528\");",
									"                    }",
									"                      break;",
									"                    case \"79\": {",
									"                      pm.globals.set(\"otp_value\",\"794045\");",
									"                    }",
									"                      break;",
									"                    case \"80\": {",
									"                      pm.globals.set(\"otp_value\",\"806776\");",
									"                    }",
									"                      break;",
									"                    default:{",
									"                      pm.globals.set(\"otp_value\",\"000000\");",
									"                    }",
									"                  }",
									"                  ",
									"                console.log(\"*********** otpType = FDSMS o unknown\");  ",
									"                if (jsonDataResponse !== undefined){",
									"                    pm.globals.set(\"otp_value\",jsonDataResponse);",
									"                }",
									"              }",
									"              break;",
									"              ",
									"              default:{ // FD",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"OTP value has a correct length of -> \" + pm.globals.get(\"otp_value\").length, function () {",
									"                    pm.expect(pm.globals.get(\"otp_value\"),pm.globals.get(\"otp_value\") + \" -> OTP size of 6 is ok \" + pm.globals.get(\"otp_value\").lengt).to.be.lengthOf(6);",
									"                });",
									"              }",
									"            }",
									"            pm.globals.set(\"otpCoordinate\", pm.globals.get(\"otp_value\").substring(0,2));",
									"            pm.globals.set(\"otpKey\", pm.globals.get(\"otp_value\").substring(2,6));",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(pm.globals.get(\"otpType\")) {",
									"            ",
									"            case \"TPC\":",
									"            case \"unknown\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0d0239f1-868c-4394-a405-2f8443394c72",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"GET OTP VALUE \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"\";",
									"const provider = pm.environment.get(\"caAPIsCore\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S10_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "text/plain"
							},
							{
								"key": "HEADER.APPLICATIONID",
								"value": "appId"
							},
							{
								"key": "HEADER.TRACKING_ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/no-prod/v1/otp",
							"host": [
								"{{provider}}"
							],
							"path": [
								"no-prod",
								"v1",
								"otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "INTERNAL_spa - sign payment_v.10.00",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4974bae7-ef7c-4e25-b154-d39cb110e37a",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            switch (pm.globals.get(\"otpType\")){",
									"                case \"TPC\":{",
									"                    console.log(\"********************** FIRMA TPC FUERA DE SCOPE: \");",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> Firma TPC Fuera de Alcance \", function () {",
									"                        pm.expect(1).to.eql(1);",
									"                    });",
									"                    ",
									"                    // Verificar que el Status Code es 400",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 400\", function () {",
									"                        pm.response.to.have.status(400);",
									"                    });",
									"                }",
									"                break;",
									"                default: {",
									"                    switch(idTest) {",
									"                        case \"TRF042F\":",
									"                        case \"TRF011F\":",
									"                        case \"TRF115F\":{",
									"                            console.log(\"********************** TRANSFERENCIA DIA PASADO: \");",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an Expected error \", function () {",
									"                                pm.expect(1).to.eql(1);",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 400",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 400\", function () {",
									"                                pm.response.to.have.status(400);",
									"                            });",
									"                        }",
									"                        break;",
									"                        case \"TRF142F\": // Empresa Baja",
									"                        case \"TRF015F\": // Particular Traba de pago a terceros",
									"                        case \"TRF138F\":{ // Particular Baja",
									"                            console.log(\"********************** Particualr Baja: \");",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an Expected error \", function () {",
									"                                pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"16958\");",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 400",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 400\", function () {",
									"                                pm.response.to.have.status(400);",
									"                            });",
									"                        }",
									"                        break;",
									"                        case \"TRF144F\": // Empresa Traba de pago a terceros",
									"                        case \"TRF140F\":{",
									"                            console.log(\"********************** Particualr Baja: \");",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an Expected error \", function () {",
									"                                pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"020029\");",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 400",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 400\", function () {",
									"                                pm.response.to.have.status(400);",
									"                            });",
									"                        }",
									"                        break;",
									"                        ",
									"                        case \"TRF127ABF\":{ // Transferencia Día Pasado",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an Expected error \", function () {",
									"                                pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"71801\");",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 400",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 400\", function () {",
									"                                pm.response.to.have.status(400);",
									"                            });",
									"                        }",
									"                        break;",
									"",
									"                        case \"TRP016F\":{ // Cuenta sin Fondos",
									"                            console.log(\"********************** Particualr Baja: \");",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an Expected error \", function () {",
									"                                pm.expect(jsonDataResponse.messages[0].i18nCode,\"System has thrown an EXPECTED error -> \" + jsonDataResponse.messages[0].i18nCode).to.eql(\"12263\");",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 400",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 400\", function () {",
									"                                pm.response.to.have.status(400);",
									"                            });",
									"                        }",
									"                        break;",
									"                        ",
									"                        default:{",
									"                            console.log(\"********************** ERROR EN PAGOS: \");",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                                pm.expect(1).to.eql(2);",
									"                            });",
									"                            ",
									"                            // Verificar que el Status Code es 500",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                                pm.response.to.have.status(500);",
									"                            });",
									"                        }   ",
									"                    }",
									"                }",
									"            }",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              //case \"TRF006F\":",
									"              case \"TRF024F\": //Esperamos fallo porque tiene firma VTPC2",
									"              //case \"TRF015F\": //Esperamos fallo porque tiene firma por SMS VTC2",
									"              case \"TRF018F\": //Esperamos fallo porque la cuenta ordenante tiene saldo cero",
									"              case \"TRP016F\": //Esperamos fallo porque la cuenta ordenante no tiene fondos",
									"              case \"TRF011F\": //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"              case \"TRP015F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"              //case \"TRF020F\":{ //Esperamos fallo porque tiene firma por SMS VTC2",
									"              ",
									"              ",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF015F/TRF018F/TRP016F/TRP015F\");",
									"              break;",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"            switch(idTest) {",
									"              //case \"TRF006F\":",
									"              //case \"TRF015F\":",
									"              case \"TRF011F\":",
									"              case \"TRF018F\":",
									"              case \"TRF024F\":",
									"              case \"TRP015F\":",
									"              case \"TRP016F\":{",
									"                 /*",
									"                  pm.test(\"<\" + epictest + \"> \" + \"<\" + idtest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                    pm.expect(jsonDataResponse[0].paymentId,\"PaymentID exists\").to.exist;",
									"                  });",
									"                  */",
									"               console.log(\"*********** TRF006F/TRF011F/TRF024F/TRP015F\");   ",
									"              }",
									"              break;",
									"              default:{",
									"                // Almacenar el jsonData Response (Body)",
									"                //if(pm.response.json()){",
									"                //var jsonDataResponse = pm.response.json();",
									"                // Validar que existe un PaymentID en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"PaymentID exists -> \" + jsonDataResponse[0].paymentId, function (){",
									"                    pm.expect(jsonDataResponse[0].paymentId,\"PaymentID exists\").to.exist;",
									"                });",
									"                //pm.globals.unset(\"paymentId\");",
									"                pm.globals.set(\"paymentId\",jsonDataResponse[0].paymentId);",
									"                //console.log(\"*********** DEFAULT\");",
									"              }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            case \"TRF011F\":",
									"            case \"TRP015F\":",
									"            case \"TRF015F\":",
									"            case \"TRF018F\":",
									"            case \"TRF024F\":",
									"            case \"TRP016F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "df5edae4-ced2-40c6-aee9-69a19a31ca9b",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"SPA SIGN PAYMENT \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/internal\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S12_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"//OTP obtenido manualmente desde BSO",
									"pm.globals.set(\"otp_value\", \"00\");",
									"console.log(\"OTP VALUE GLOBALS = \" +  pm.globals.get(\"otp_value\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-spa}}"
							},
							{
								"key": "HEADER.SERVICE_PROCEDENCE",
								"value": "{{procedence}}"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-spa}}"
							},
							{
								"key": "TPP-Transaction-ID",
								"value": "{{hubTxID}}"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "{{tppRole}}"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "Upgrade-Insecure-Requests",
								"value": "1"
							},
							{
								"key": "Accept",
								"value": "application/json,text/xml"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": ""
							},
							{
								"key": "TPP-HubTransaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "Signature",
								"value": ""
							},
							{
								"key": "TPP-Certificate",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"otpType\": \"{{otpType}}\",\n\t\"coordinate\": \"{{otpCoordinate}}\",\n\t\"otp\": \"{{otpKey}}\",\n\t\"pin\": \"{{pass}}\",\n\t\"payments\": [\n\t\t\"{{paymentId}}\"\n\t]\n}"
						},
						"url": {
							"raw": "{{provider}}/v1/payments/{{payment-product}}/sign",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"payments",
								"{{payment-product}}",
								"sign"
							]
						}
					},
					"response": []
				},
				{
					"name": "COR105_ComprobarEstadoDelPago_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c4a99ed-1545-4d48-9f9b-b9cde69e562f",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP PAYMENT STATUS \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S13_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71034a67-df6a-422c-8f1c-01a78f00e511",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF011F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"",
									"            switch(idTest) {",
									"                case \"TRF127ABF\": // Día pasado",
									"                case \"TRP016F\": // Cuenta sin Fondos",
									"                case \"TRF006F\":",
									"                case \"TRF024F\":",
									"                case \"TRP015F\":",
									"                case \"TRF011F\":",
									"                case \"TRF015F\": // Firma por SMS - VTCP2",
									"                case \"TRF018F\": // Cuenta ordenante con saldo 0",
									"                case \"TRF042F\":  // Transferencia Particular Nacional Futura - Día pasado",
									"                case \"TRF138F\": // Particular Baja",
									"                case \"TRF140F\": // Particular Traba de pago a terceros",
									"                case \"TRF142F\": // Empresa Baja",
									"                case \"TRF144F\": // Empresa Traba de pago a terceros",
									"                case \"TRF115F\":{ // Transferencia Empresa Nacional Futura - Día pasado",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"RJCT\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"RJCT\");",
									"                    });",
									"                }",
									"                console.log(\"*********** TRF006F/TRF024F/TRP015F\");",
									"                break;",
									"     ",
									"                /*",
									"                case \"TRP016F\":{",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACWC\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACWC\");",
									"                    });",
									"                    console.log(\"*********** TRF015F/TRF056/TRP014F\");",
									"                }",
									"                break;",
									"                */",
									"                case \"TRF056\":",
									"                case \"TRF019F\":",
									"                //case \"TRF020F\": // TROX y Firma por Tarjeta de Coordenadas",
									"                //case \"TRF021F\": // TROX y Firma por Tarjeta de Coordenadas",
									"                case \"TRF075F\": // Traba de pago a terceros",
									"                case \"TRP014F\":{ // Firma Conjunta",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSP\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACSP\");",
									"                    });",
									"                    console.log(\"*********** TRP014F\");",
									"                }",
									"                break;",
									"                ",
									"                default:{",
									"                     switch (pm.globals.get(\"otpType\")){",
									"                        case \"TPC\":{",
									"                           // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSP\"",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists and is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists \").to.exist;",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACSP\");",
									"                                //pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK \").to.eql(pm.variables.get(\"OperationType\"));",
									"                            });  ",
									"                        }",
									"                        break;",
									"                        default:{",
									"                            // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSC\"",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists and is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists \").to.exist;",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACSC\");",
									"                                //pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK \").to.eql(pm.variables.get(\"OperationType\"));",
									"                            }); ",
									"                            if(jsonDataResponse.transactionStatus == \"ACSC\"){",
									"                                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transaction Fees exists -> \" + jsonDataResponse.transactionFees.amount + \" \" + jsonDataResponse.transactionFees.currency, function () {",
									"                                    pm.expect(jsonDataResponse.transactionFees.amount,\"Transaction Fees Amount exist -> \" + jsonDataResponse.transactionFees.amount).to.exist;",
									"                                    pm.expect(jsonDataResponse.transactionFees.currency,\"Transaction Fees Currency exists -> \" + jsonDataResponse.transactionFees.currency).to.exist;",
									"                                });",
									"                            }",
									"                        }",
									"                     }",
									"                }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"TRF011FP\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "HUB-Request-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"type": "text",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"type": "text",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"type": "text",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"type": "text",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"type": "text",
								"value": "BDE"
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"key": "PSU-IP-Address",
								"type": "text",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"type": "text",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"type": "text",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"type": "text",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"type": "text",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"type": "text",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"type": "text",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"description": "Obligatorio",
								"key": "Digest",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"type": "text",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"type": "text",
								"value": "TODO"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json,text/xml"
							},
							{
								"key": "Accept-Encoding",
								"type": "text",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"type": "text",
								"value": "es-ES,es;q=0.9"
							},
							{
								"key": "HEADER.ENV",
								"type": "text",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/{{payment-service}}/{{payment-product}}/{{paymentId}}/status",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"{{payment-service}}",
								"{{payment-product}}",
								"{{paymentId}}",
								"status"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Detail+Sepa+Credit+Transfers\n\nEl TPP utiliza esta petición para saber los detalles y el estado de un pago.\n\nDado que la información que se devuelve por el estado de un pago esta también contenida en los detalles de un pago, por simplicidad ambas llamadas a la api devuelven el mismo conjunto de datos."
					},
					"response": []
				},
				{
					"name": "COR106_RecuperarInformacionDeInicioDePago_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "603cc82f-25cc-4222-8196-2350d5e8a210",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP PAYMENT STATUS DETAIL \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S13_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c935965e-6c88-43fb-a977-3acf94e250b6",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"    //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 500",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 500\", function () {",
									"                    pm.response.to.have.status(500);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF011F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 200",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 200\", function () {",
									"                    pm.response.to.have.status(200);",
									"                });",
									"              }",
									"            }",
									"            ",
									"// ******************************** Response Body Assertions **************************************",
									"            /*",
									"            //Se verifica que se está devolviendo la info del PaymentID firmado previamente",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"PaymentID is OK -> \" + jsonDataResponse.paymentId, function (){",
									"                    pm.expect(jsonDataResponse.paymentId,\"PaymentID exists\").to.be.eql(pm.globals.get(\"paymentId\"));",
									"            });",
									"            */",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"InstructedAmount is OK -> \" + jsonDataResponse.instructedAmount.amount + \" \" + jsonDataResponse.instructedAmount.currency, function () {",
									"                pm.expect(parseFloat(jsonDataResponse.instructedAmount.amount),\"InstructedAmount Amount is OK -> \" + jsonDataResponse.instructedAmount.amount).to.be.eql(parseFloat(pm.variables.get(\"amount\")));",
									"                pm.expect(jsonDataResponse.instructedAmount.currency,\"InstructedAmount Currency is OK -> \" + jsonDataResponse.instructedAmount.currency).to.be.eql(pm.variables.get(\"amountCurrency\"));",
									"            });",
									"                ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Debtor Account is OK -> \" + jsonDataResponse.debtorAccount.iban, function () {",
									"                    pm.expect(jsonDataResponse.debtorAccount.iban,\"Debtor Account IBAN is OK -> \" + jsonDataResponse.debtorAccount.iban).to.be.eql(pm.variables.get(\"DBTIban\"));",
									"                    pm.expect(jsonDataResponse.debtorAccount.currency,\"Debtor Account Currency is OK -> \" + jsonDataResponse.debtorAccount.currency).to.be.eql(pm.variables.get(\"DBTCurrency\"));",
									"            });",
									"            ",
									"            switch(pm.variables.get(\"operationType\")) {",
									"                case \"TRAF\":",
									"                case \"TSAL\":{",
									"                    ",
									"                }",
									"                break;",
									"                ",
									"                default: {",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Name is OK -> \" + jsonDataResponse.creditorName, function () {",
									"                        pm.expect(jsonDataResponse.creditorName,\"Creditor Name is OK \").to.be.eql(pm.variables.get(\"CRDName\"));",
									"                    });",
									"                }",
									"            }",
									"            ",
									"            if (pm.globals.get(\"accountType\") == \"iban\"){",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + jsonDataResponse.creditorAccount.iban, function () {",
									"                        pm.expect(jsonDataResponse.creditorAccount.iban,\"Creditor Account IBAN is OK -> \" + jsonDataResponse.creditorAccount.iban).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                        pm.expect(jsonDataResponse.creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse.creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                });",
									"            } else {",
									"                if (typeof(pm.variables.get(\"CRDIban\")) == 'number'){",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + JSON.parse(jsonDataResponse.creditorAccount.bban), function () {",
									"                        pm.expect(JSON.parse(jsonDataResponse.creditorAccount.bban),\"Creditor Account BBAN is OK -> \" + JSON.parse(jsonDataResponse.creditorAccount.bban)).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                        pm.expect(jsonDataResponse.creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse.creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                    });",
									"                } else {",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Account is OK -> \" + jsonDataResponse.creditorAccount.bban, function () {",
									"                        pm.expect(jsonDataResponse.creditorAccount.bban,\"Creditor Account BBAN is OK -> \" + jsonDataResponse.creditorAccount.bban).to.be.eql(pm.variables.get(\"CRDIban\"));",
									"                        pm.expect(jsonDataResponse.creditorAccount.currency,\"Creditor Account Currency is OK -> \" + jsonDataResponse.creditorAccount.currency).to.be.eql(pm.variables.get(\"CRDCurrency\"));",
									"                    });",
									"                }",
									"            }",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Creditor Address is OK -> \" + jsonDataResponse.creditorAddress.street + \", \" + jsonDataResponse.creditorAddress.buildingNumber + \". \" + jsonDataResponse.creditorAddress.city + \", \" + jsonDataResponse.creditorAddress.postalCode + \". \" + jsonDataResponse.creditorAddress.country , function () {",
									"                    pm.expect(jsonDataResponse.creditorAddress.street,\"Creditor Address is OK -> \" + jsonDataResponse.creditorAddress.street).to.be.eql(pm.variables.get(\"CRDAddressStreet\"));",
									"                    pm.expect(parseInt(jsonDataResponse.creditorAddress.buildingNumber),\"Creditor Address Building Number is OK -> \" + jsonDataResponse.creditorAddress.buildingNumber).to.be.eql(pm.variables.get(\"CRDAddressBuildingNumber\"));",
									"                    pm.expect(jsonDataResponse.creditorAddress.city,\"Creditor Address City is OK -> \" + jsonDataResponse.creditorAddress.city).to.be.eql(pm.variables.get(\"CRDAddressCity\"));",
									"                    pm.expect(parseInt(jsonDataResponse.creditorAddress.postalCode),\"Creditor Address Postal Code is OK -> \" + jsonDataResponse.creditorAddress.postalCode).to.be.eql(pm.variables.get(\"CRDAddressPostalCode\"));",
									"                    pm.expect(jsonDataResponse.creditorAddress.country,\"Creditor Address Country is OK -> \" + jsonDataResponse.creditorAddress.country).to.be.eql(pm.variables.get(\"CRDAddressCountry\"));",
									"            });",
									"            ",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Subjetc is OK -> \" + jsonDataResponse.remittanceInformationUnstructured, function () {",
									"                    pm.expect(jsonDataResponse.remittanceInformationUnstructured,\"Payment Subjetc is OK \").to.be.eql(pm.variables.get(\"paymentSubject\"));",
									"            });",
									"            ",
									"            switch(idTest) {",
									"                case \"TRF127ABF\": // Día pasado",
									"                case \"TRP016F\": // Cuenta sin Fondos",
									"                case \"TRF006F\":",
									"                case \"TRF024F\":",
									"                case \"TRP015F\":",
									"                case \"TRF011F\":",
									"                case \"TRF015F\": // Firma por SMS - VTCP2",
									"                case \"TRF018F\": // Cuenta ordenante con saldo 0",
									"                case \"TRF042F\":  // Transferencia Particular Nacional Futura - Día pasado",
									"                case \"TRF138F\": // Particular Baja",
									"                case \"TRF140F\": // Particular Traba de pago a terceros",
									"                case \"TRF142F\": // Empresa Baja",
									"                case \"TRF144F\": // Empresa Traba de pago a terceros",
									"                case \"TRF115F\":{ // Transferencia Empresa Nacional Futura - Día pasado",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"RJCT\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"RJCT\");",
									"                    });",
									"                }",
									"                console.log(\"*********** TRF006F/TRF024F/TRP015F\");",
									"                break;",
									"     ",
									"                /*",
									"                case \"TRP016F\":{",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACWC\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACWC\");",
									"                    });",
									"                    console.log(\"*********** TRF015F/TRF056/TRP014F\");",
									"                }",
									"                break;",
									"                */",
									"                ",
									"                case \"TRF056\":",
									"                case \"TRF019F\":",
									"                case \"TRF075F\":",
									"                //case \"TRF020F\": // TROX y Firma por Tarjeta de Coordenadas",
									"                //case \"TRF021F\": // TROX y Firma por Tarjeta de Coordenadas",
									"                case \"TRP014F\":{ // Firma Conjunta",
									"                    // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSP\"",
									"                    pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists -> \" + jsonDataResponse.transactionStatus, function (){",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists\").to.exist;",
									"                        pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACSP\");",
									"                    });",
									"                    console.log(\"*********** TRP014F\");",
									"                }",
									"                break;",
									"                ",
									"                default:{",
									"                     switch (pm.globals.get(\"otpType\")){",
									"                        case \"TPC\":{",
									"                           // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSP\"",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists and is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists \").to.exist;",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACSP\");",
									"                                //pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK \").to.eql(pm.variables.get(\"OperationType\"));",
									"                            });  ",
									"                        }",
									"                        break;",
									"                        default:{",
									"                            // Validar que existe un Payment Operation Status en el Body de la respuesta y es igual a \"ACSC\"",
									"                            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Operation Status exists and is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status exists \").to.exist;",
									"                                pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK\").to.eql(\"ACSC\");",
									"                                //pm.expect(jsonDataResponse.transactionStatus,\"Payment Operation Status is OK \").to.eql(pm.variables.get(\"OperationType\"));",
									"                            }); ",
									"                            if(jsonDataResponse.transactionStatus == \"ACSC\"){",
									"                                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Transaction Fees exists -> \" + jsonDataResponse.transactionFees.amount + \" \" + jsonDataResponse.transactionFees.currency, function () {",
									"                                    pm.expect(jsonDataResponse.transactionFees.amount,\"Transaction Fees Amount exist -> \" + jsonDataResponse.transactionFees.amount).to.exist;",
									"                                    pm.expect(jsonDataResponse.transactionFees.currency,\"Transaction Fees Currency exists -> \" + jsonDataResponse.transactionFees.currency).to.exist;",
									"                                });",
									"                            }",
									"                        }",
									"                     }",
									"                }",
									"            }",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"TRF011FP\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2",
								"type": "text"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8",
								"type": "text"
							},
							{
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP",
								"type": "text"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]",
								"type": "text"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5",
								"type": "text"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443",
								"type": "text"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip",
								"type": "text"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES",
								"type": "text"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)",
								"type": "text"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST",
								"type": "text"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9",
								"type": "text"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963",
								"type": "text"
							},
							{
								"key": "Digest",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Signature",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "TPP-Signature-Certificate",
								"value": "TODO",
								"type": "text",
								"description": "Obligatorio"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json,text/xml",
								"type": "text"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9",
								"type": "text"
							},
							{
								"key": "HEADER.ENV",
								"value": "{{env}}",
								"type": "text",
								"description": "Solo necesario en INT/UAT"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/{{payment-service}}/{{payment-product}}/{{paymentId}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"{{payment-service}}",
								"{{payment-product}}",
								"{{paymentId}}"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Detail+Instant+Sepa+Credit+Transfers"
					},
					"response": []
				},
				{
					"name": "COR108_CancelaciónInicioDePago_v.10.00",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7833d06c-2689-4c9d-93bb-d66302f69fb2",
								"exec": [
									"console.log(\"-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- \" + \"TPP PAYMENT CANCELLATION \" + pm.globals.get(\"QA-trackingID\") + \" -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-\");",
									"",
									"//Obtención del parámetro de path \"provider\" como IP:Port/resource",
									"const resource = \"/psd2/redsys\";",
									"const provider = pm.environment.get(\"caServerIP\") + \":\" + pm.environment.get(\"caServerPort\") + resource;",
									"pm.globals.set(\"provider\", provider);",
									"",
									"console.log(\"Provider \" + provider);",
									"",
									"// Generación del TrackingID único",
									"var moment = require('moment');",
									"let timeStamp = new moment().format(\"YYYYMMDDHmm\");",
									"",
									"pm.globals.set(\"QA-trackingID\", pm.variables.get(\"idTest\") +\"-S13_\" + timeStamp);",
									"//console.log(\"timestamp \"+ timestamp);",
									"console.log(\"QA-trackingID \"+ pm.globals.get(\"QA-trackingID\"));",
									"",
									"var reqid = Math.floor((Math.random() * 1000000000) + 1);",
									"pm.globals.set(\"tppRequestId\", reqid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c509954f-3482-48c0-9d4b-8c93832f28b4",
								"exec": [
									"// Variables de Épica, TestID y TestName",
									"var epicTest = pm.variables.get (\"epicTest\");",
									"var idTest = pm.variables.get(\"idTest\");",
									"var testName = pm.variables.get(\"testName\");",
									"console.log(\"********************** Epic: \"+ epicTest + \" TestID \" + idTest + \" ********************\");",
									"console.log(\"********************** \" + \"Test Name: \" + testName + \" ********************\");",
									"",
									"pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \" *********** \" + testName + \" ***********\", function (){",
									"    pm.expect(1).to.eql(1);",
									"});",
									"",
									"// Control de excepción de Body Response",
									"try {",
									"    var jsonDataResponse = pm.response.json();",
									"        //Si la respuesta devuelve Body verificamos assertions",
									"    if (jsonDataResponse){",
									"        // Almacenar el jsonData Response (Body)",
									"        //var jsonDataResponse = pm.response.json();",
									"        if ((jsonDataResponse.messages) !== undefined) { //ERRORES ",
									"            console.log(\"********************** ERROR EN PAGOS: \");",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + jsonDataResponse.messages[0].i18nCode + \" / \" + jsonDataResponse.messages[0].description + \" -> System has thrown an error \", function () {",
									"                pm.expect(1).to.eql(2);",
									"            });",
									"            ",
									"            // Verificar que el Status Code es 401",
									"            pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"ERROR Status code is -> 500\", function () {",
									"                pm.response.to.have.status(500);",
									"            });",
									"        } else { // No hay errores",
									"// ******************************** Validación del HTTP STATUS CODE **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{ //Esperamos fallo porque la cuenta ordenante tiene saldo negativo",
									"                // Verificar que el Status Code es 400",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 400\", function () {",
									"                    pm.response.to.have.status(400);",
									"                });",
									"              }",
									"              console.log(\"*********** TRF011F\");",
									"              break;",
									"              */",
									"              default:{",
									"                // Verificar que el Status Code es 204",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Status code is OK -> 204\", function () {",
									"                    pm.response.to.have.status(204);",
									"                });",
									"              }",
									"            }",
									"",
									"// ******************************** Response Body Assertions **************************************",
									"            switch(idTest) {",
									"              /*",
									"              case \"TRF011F\":{",
									"                // Validar que la Disponibilidad de Fondos es false en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Funds Availability is OK -> \" + jsonDataResponse.fundsAvailable, function (){",
									"                    pm.expect(jsonDataResponse.fundsAvailable,\"Funds Availability OK is \").to.be.false;",
									"                });",
									"                }",
									"                break;",
									"                */",
									"              default:{",
									"                // Validar que la la Cancelación de incio del Pago es \"CANC\" en el Body de la respuesta",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Payment Cancellation is OK -> \" + jsonDataResponse.transactionStatus, function (){",
									"                    pm.expect(jsonDataResponse.transactionStatus,\"Payment Cancellation is OK \").to.be.eql(\"CANC\");",
									"                });",
									"              }",
									"            }            ",
									"        }",
									"    } else { // Reportamos error de Body",
									"        switch(idTest) {",
									"            //case \"CUE174F\":",
									"            case \"TRF011F\":{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined as expected \", function () {",
									"                    pm.expect(1).to.eql(1);",
									"                });",
									"            }",
									"            break;",
									"            ",
									"            default:{",
									"                pm.test(\"<\" + epicTest + \"> \" + \"<\" + idTest + \"> \" + \"Response Body is Undefined \", function () {",
									"                    pm.expect(1).to.eql(2);",
									"                });",
									"            }",
									"        }",
									"    }",
									"} catch (e) {",
									"    console.log(\"There was an error parsing JSON Body \", e);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "HUB-Transaction-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e2"
							},
							{
								"key": "HUB-Request-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e8"
							},
							{
								"description": "Obligatorio",
								"key": "X-Request-ID",
								"value": "{{tppRequestId}}"
							},
							{
								"key": "TPP-HUB-ID",
								"value": "{{client-id-tpp}}"
							},
							{
								"key": "TPP-HUB-Name",
								"value": "Nombre del TPP"
							},
							{
								"key": "TPP-HUB-Rol",
								"value": "[\"{{tppRole}}\"]"
							},
							{
								"key": "TPP-HUB-National-Competent-Authority",
								"value": "BDE"
							},
							{
								"description": "Obligatorio",
								"key": "Authorization",
								"value": "Bearer {{access-token-tpp}}"
							},
							{
								"key": "PSU-IP-Address",
								"value": "192.168.16.5"
							},
							{
								"key": "PSU-IP-Port",
								"value": "443"
							},
							{
								"key": "PSU-Accept",
								"value": "application/json"
							},
							{
								"key": "PSU-Accept-Charset",
								"value": "utf-8"
							},
							{
								"key": "PSU-Accept-Encoding",
								"value": "gzip"
							},
							{
								"key": "PSU-Accept-Language",
								"value": "es-ES"
							},
							{
								"key": "PSU-User-Agent",
								"value": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5 (.NET CLR 3.5.30729)"
							},
							{
								"key": "PSU-Http-Method",
								"value": "POST"
							},
							{
								"key": "PSU-Device-ID",
								"value": "5b3ab8e8-0fd5-43d2-946e-d75958b172e9"
							},
							{
								"key": "PSU-Geo-Location",
								"value": "GEO:90.023856,25.345963"
							},
							{
								"description": "Obligatorio",
								"key": "Digest",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "Signature",
								"value": "TODO"
							},
							{
								"description": "Obligatorio",
								"key": "TPP-Signature-Certificate",
								"value": "TODO"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json,text/xml"
							},
							{
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br"
							},
							{
								"key": "Accept-Language",
								"value": "es-ES,es;q=0.9"
							},
							{
								"description": "Solo necesario en INT/UAT",
								"key": "HEADER.ENV",
								"value": "{{env}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{provider}}/v1/{{payment-service}}/{{payment-product}}/{{paymentId}}",
							"host": [
								"{{provider}}"
							],
							"path": [
								"v1",
								"{{payment-service}}",
								"{{payment-product}}",
								"{{paymentId}}"
							]
						},
						"description": "http://confluence.bancsabadell.com/display/OP/Cancel+Sepa+Credit+Transfers\n\nEsta petición permite iniciar la cancelación de un pago. \n\nDependiendo del servicio de pago, el producto de pago y la implementación del ASPSP, esta petición podría ser suficiente para cancelar el pago o podría ser necesario una autorización. "
					},
					"response": []
				}
			],
			"description": "http://confluence.bancsabadell.com/pages/viewpage.action?pageId=17307387\n\n\nEl servicio de iniciación de pago permite que un TPP pueda iniciar un pago en nombre del PSU.\n\nPara la ejecución de cualquier iniciación de pagos solicitada por el TPP, la petición debe ser firmada con su correspondiente proceso de [SCA] Firma de operaciones. Se ofrece al TPP la opción de que el PSU realice la firma a través de dos modos: Redirect o Desacoplado.\n\nSe debe permitir la iniciación de pagos que requieren firmar conjuntas y se debe poder firmar más de una operación en el proceso de firma en cualquiera de los modos soportados\n\nLas peticiones de iniciación de pagos asumen que la identidad del PSU es conocida gracias al paso de [Login] Autenticación OAuth (PreStep)\n\n \nPara información técnica más detalla, revisar la documentación en Dominio Transferencias\n\n\nReferencia única\nLa concatenación del Número de registro del TPP y la Referencia creada por el TPP (TPP-HUB-ID + X-Request-ID) formaría la referencia única que deberá figurar en los extractos de movimientos de cuenta\n\n\nFases de una iniciación de pagos\nFase Previa : Autenticación con OAuth (PreStep)\nFase 1 : TPP invoca al servicio API para iniciar un pago\nFase 2 : La entidad registra el pago, devuelve un Payment ID y facilita al TPP cómo iniciar el proceso de firma\nFase 3 : El PSU firma la operación\nFase 3a: El PSU firma en modo Redirect, por tanto el TPP presenta la pantalla de firma cargando una url devuelta por la entidad para tal fin\nFase 3b: El PSU firma en modo Desacoplado, por tanto el PSU se va a la página web de la entidad y en el área correspondiente el PSU firma la operación\nFase 4: El TPP consulta el estado del pago\n"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "252c1126-4675-4156-b671-3c811cbb36ff",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6a388a7b-7cfc-4e17-a7d3-d30e8a04af2a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}